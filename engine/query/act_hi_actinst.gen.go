// Code generated by github.com/wubin1989/gen. DO NOT EDIT.
// Code generated by github.com/wubin1989/gen. DO NOT EDIT.
// Code generated by github.com/wubin1989/gen. DO NOT EDIT.

package query

import (
	"context"

	gormgen "github.com/wubin1989/gen"
	"github.com/wubin1989/gorm"
	"github.com/wubin1989/gorm/clause"
	"github.com/wubin1989/gorm/schema"

	"github.com/wubin1989/gen/field"

	"github.com/wubin1989/dbresolver"

	"github.com/go-cinderella/cinderella-engine/engine/model"
)

func newActHiActinst(db *gorm.DB, opts ...gormgen.DOOption) actHiActinst {
	_actHiActinst := actHiActinst{}

	_actHiActinst.actHiActinstDo.UseDB(db, opts...)
	_actHiActinst.actHiActinstDo.UseModel(&model.ActHiActinst{})

	tableName := _actHiActinst.actHiActinstDo.TableName()
	_actHiActinst.ALL = field.NewAsterisk(tableName)
	_actHiActinst.ID = field.NewString(tableName, "id_")
	_actHiActinst.Rev = field.NewInt32(tableName, "rev_")
	_actHiActinst.ProcDefID = field.NewString(tableName, "proc_def_id_")
	_actHiActinst.ProcInstID = field.NewString(tableName, "proc_inst_id_")
	_actHiActinst.ExecutionID = field.NewString(tableName, "execution_id_")
	_actHiActinst.ActID = field.NewString(tableName, "act_id_")
	_actHiActinst.TaskID = field.NewString(tableName, "task_id_")
	_actHiActinst.CallProcInstID = field.NewString(tableName, "call_proc_inst_id_")
	_actHiActinst.ActName = field.NewString(tableName, "act_name_")
	_actHiActinst.ActType = field.NewString(tableName, "act_type_")
	_actHiActinst.Assignee = field.NewString(tableName, "assignee_")
	_actHiActinst.StartTime = field.NewTime(tableName, "start_time_")
	_actHiActinst.EndTime = field.NewTime(tableName, "end_time_")
	_actHiActinst.TransactionOrder = field.NewInt32(tableName, "transaction_order_")
	_actHiActinst.Duration = field.NewInt64(tableName, "duration_")
	_actHiActinst.DeleteReason = field.NewString(tableName, "delete_reason_")
	_actHiActinst.TenantID = field.NewString(tableName, "tenant_id_")
	_actHiActinst.BusinessResult = field.NewString(tableName, "business_result_")
	_actHiActinst.BusinessParameter = field.NewString(tableName, "business_parameter_")

	_actHiActinst.fillFieldMap()

	return _actHiActinst
}

type actHiActinst struct {
	actHiActinstDo

	ALL               field.Asterisk
	ID                field.String
	Rev               field.Int32
	ProcDefID         field.String
	ProcInstID        field.String
	ExecutionID       field.String
	ActID             field.String
	TaskID            field.String
	CallProcInstID    field.String
	ActName           field.String
	ActType           field.String
	Assignee          field.String
	StartTime         field.Time
	EndTime           field.Time
	TransactionOrder  field.Int32
	Duration          field.Int64
	DeleteReason      field.String
	TenantID          field.String
	BusinessResult    field.String
	BusinessParameter field.String

	fieldMap map[string]field.Expr
}

func (a actHiActinst) Table(newTableName string) *actHiActinst {
	a.actHiActinstDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a actHiActinst) As(alias string) *actHiActinst {
	a.actHiActinstDo.DO = *(a.actHiActinstDo.As(alias).(*gormgen.DO))
	return a.updateTableName(alias)
}

func (a *actHiActinst) updateTableName(table string) *actHiActinst {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "id_")
	a.Rev = field.NewInt32(table, "rev_")
	a.ProcDefID = field.NewString(table, "proc_def_id_")
	a.ProcInstID = field.NewString(table, "proc_inst_id_")
	a.ExecutionID = field.NewString(table, "execution_id_")
	a.ActID = field.NewString(table, "act_id_")
	a.TaskID = field.NewString(table, "task_id_")
	a.CallProcInstID = field.NewString(table, "call_proc_inst_id_")
	a.ActName = field.NewString(table, "act_name_")
	a.ActType = field.NewString(table, "act_type_")
	a.Assignee = field.NewString(table, "assignee_")
	a.StartTime = field.NewTime(table, "start_time_")
	a.EndTime = field.NewTime(table, "end_time_")
	a.TransactionOrder = field.NewInt32(table, "transaction_order_")
	a.Duration = field.NewInt64(table, "duration_")
	a.DeleteReason = field.NewString(table, "delete_reason_")
	a.TenantID = field.NewString(table, "tenant_id_")
	a.BusinessResult = field.NewString(table, "business_result_")
	a.BusinessParameter = field.NewString(table, "business_parameter_")

	a.fillFieldMap()

	return a
}

func (a *actHiActinst) WithContext(ctx context.Context) IActHiActinstDo {
	return a.actHiActinstDo.WithContext(ctx)
}

func (a actHiActinst) TableName() string { return a.actHiActinstDo.TableName() }

func (a actHiActinst) Alias() string { return a.actHiActinstDo.Alias() }

func (a actHiActinst) Columns(cols ...field.Expr) gormgen.Columns {
	return a.actHiActinstDo.Columns(cols...)
}

func (a *actHiActinst) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *actHiActinst) GetFieldExprByName(fieldName string) (field.Expr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	return _f, ok
}

func (a *actHiActinst) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 17)
	a.fieldMap["id_"] = a.ID
	a.fieldMap["rev_"] = a.Rev
	a.fieldMap["proc_def_id_"] = a.ProcDefID
	a.fieldMap["proc_inst_id_"] = a.ProcInstID
	a.fieldMap["execution_id_"] = a.ExecutionID
	a.fieldMap["act_id_"] = a.ActID
	a.fieldMap["task_id_"] = a.TaskID
	a.fieldMap["call_proc_inst_id_"] = a.CallProcInstID
	a.fieldMap["act_name_"] = a.ActName
	a.fieldMap["act_type_"] = a.ActType
	a.fieldMap["assignee_"] = a.Assignee
	a.fieldMap["start_time_"] = a.StartTime
	a.fieldMap["end_time_"] = a.EndTime
	a.fieldMap["transaction_order_"] = a.TransactionOrder
	a.fieldMap["duration_"] = a.Duration
	a.fieldMap["delete_reason_"] = a.DeleteReason
	a.fieldMap["tenant_id_"] = a.TenantID
	a.fieldMap["business_result_"] = a.BusinessResult
	a.fieldMap["business_parameter_"] = a.BusinessParameter
}

func (a actHiActinst) Clone(db *gorm.DB) actHiActinst {
	a.actHiActinstDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a actHiActinst) ReplaceDB(db *gorm.DB) actHiActinst {
	a.actHiActinstDo.ReplaceDB(db)
	return a
}

type actHiActinstDo struct{ gormgen.DO }

type IActHiActinstDo interface {
	gormgen.SubQuery
	Debug() IActHiActinstDo
	WithContext(ctx context.Context) IActHiActinstDo
	WithResult(fc func(tx gormgen.Dao)) gormgen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActHiActinstDo
	WriteDB() IActHiActinstDo
	As(alias string) gormgen.Dao
	Session(config *gorm.Session) IActHiActinstDo
	Columns(cols ...field.Expr) gormgen.Columns
	Clauses(conds ...clause.Expression) IActHiActinstDo
	Not(conds ...gormgen.Condition) IActHiActinstDo
	Or(conds ...gormgen.Condition) IActHiActinstDo
	Select(conds ...field.Expr) IActHiActinstDo
	Where(conds ...gormgen.Condition) IActHiActinstDo
	Order(conds ...field.Expr) IActHiActinstDo
	Distinct(cols ...field.Expr) IActHiActinstDo
	Omit(cols ...field.Expr) IActHiActinstDo
	Join(table schema.Tabler, on ...field.Expr) IActHiActinstDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActHiActinstDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActHiActinstDo
	Group(cols ...field.Expr) IActHiActinstDo
	Having(conds ...gormgen.Condition) IActHiActinstDo
	Limit(limit int) IActHiActinstDo
	Offset(offset int) IActHiActinstDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) IActHiActinstDo
	Unscoped() IActHiActinstDo
	Create(values ...*model.ActHiActinst) error
	CreateInBatches(values []*model.ActHiActinst, batchSize int) error
	Save(values ...*model.ActHiActinst) error
	First() (*model.ActHiActinst, error)
	Take() (*model.ActHiActinst, error)
	Last() (*model.ActHiActinst, error)
	Find() ([]*model.ActHiActinst, error)
	FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.ActHiActinst, err error)
	FindInBatches(result *[]*model.ActHiActinst, batchSize int, fc func(tx gormgen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ActHiActinst) (info gormgen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	Updates(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateFrom(q gormgen.SubQuery) gormgen.Dao
	Attrs(attrs ...field.AssignExpr) IActHiActinstDo
	Assign(attrs ...field.AssignExpr) IActHiActinstDo
	Joins(fields ...field.RelationField) IActHiActinstDo
	Preload(fields ...field.RelationField) IActHiActinstDo
	FirstOrInit() (*model.ActHiActinst, error)
	FirstOrCreate() (*model.ActHiActinst, error)
	FindByPage(offset int, limit int) (result []*model.ActHiActinst, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Fetch(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActHiActinstDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a actHiActinstDo) Debug() IActHiActinstDo {
	return a.withDO(a.DO.Debug())
}

func (a actHiActinstDo) WithContext(ctx context.Context) IActHiActinstDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a actHiActinstDo) ReadDB() IActHiActinstDo {
	return a.Clauses(dbresolver.Read)
}

func (a actHiActinstDo) WriteDB() IActHiActinstDo {
	return a.Clauses(dbresolver.Write)
}

func (a actHiActinstDo) Session(config *gorm.Session) IActHiActinstDo {
	return a.withDO(a.DO.Session(config))
}

func (a actHiActinstDo) Clauses(conds ...clause.Expression) IActHiActinstDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a actHiActinstDo) Returning(value interface{}, columns ...string) IActHiActinstDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a actHiActinstDo) Not(conds ...gormgen.Condition) IActHiActinstDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a actHiActinstDo) Or(conds ...gormgen.Condition) IActHiActinstDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a actHiActinstDo) Select(conds ...field.Expr) IActHiActinstDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a actHiActinstDo) Where(conds ...gormgen.Condition) IActHiActinstDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a actHiActinstDo) Order(conds ...field.Expr) IActHiActinstDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a actHiActinstDo) Distinct(cols ...field.Expr) IActHiActinstDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a actHiActinstDo) Omit(cols ...field.Expr) IActHiActinstDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a actHiActinstDo) Join(table schema.Tabler, on ...field.Expr) IActHiActinstDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a actHiActinstDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActHiActinstDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a actHiActinstDo) RightJoin(table schema.Tabler, on ...field.Expr) IActHiActinstDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a actHiActinstDo) Group(cols ...field.Expr) IActHiActinstDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a actHiActinstDo) Having(conds ...gormgen.Condition) IActHiActinstDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a actHiActinstDo) Limit(limit int) IActHiActinstDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a actHiActinstDo) Offset(offset int) IActHiActinstDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a actHiActinstDo) Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) IActHiActinstDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a actHiActinstDo) Unscoped() IActHiActinstDo {
	return a.withDO(a.DO.Unscoped())
}

func (a actHiActinstDo) Create(values ...*model.ActHiActinst) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a actHiActinstDo) CreateInBatches(values []*model.ActHiActinst, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a actHiActinstDo) Save(values ...*model.ActHiActinst) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a actHiActinstDo) First() (*model.ActHiActinst, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActHiActinst), nil
	}
}

func (a actHiActinstDo) Take() (*model.ActHiActinst, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActHiActinst), nil
	}
}

func (a actHiActinstDo) Last() (*model.ActHiActinst, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActHiActinst), nil
	}
}

func (a actHiActinstDo) Find() ([]*model.ActHiActinst, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActHiActinst), err
}

func (a actHiActinstDo) FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.ActHiActinst, err error) {
	buf := make([]*model.ActHiActinst, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gormgen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a actHiActinstDo) FindInBatches(result *[]*model.ActHiActinst, batchSize int, fc func(tx gormgen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a actHiActinstDo) Attrs(attrs ...field.AssignExpr) IActHiActinstDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a actHiActinstDo) Assign(attrs ...field.AssignExpr) IActHiActinstDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a actHiActinstDo) Joins(fields ...field.RelationField) IActHiActinstDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a actHiActinstDo) Preload(fields ...field.RelationField) IActHiActinstDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a actHiActinstDo) FirstOrInit() (*model.ActHiActinst, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActHiActinst), nil
	}
}

func (a actHiActinstDo) FirstOrCreate() (*model.ActHiActinst, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActHiActinst), nil
	}
}

func (a actHiActinstDo) FindByPage(offset int, limit int) (result []*model.ActHiActinst, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a actHiActinstDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a actHiActinstDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a actHiActinstDo) Fetch(result interface{}) (err error) {
	return a.DO.Fetch(result)
}

func (a actHiActinstDo) Delete(models ...*model.ActHiActinst) (result gormgen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *actHiActinstDo) withDO(do gormgen.Dao) *actHiActinstDo {
	a.DO = *do.(*gormgen.DO)
	return a
}

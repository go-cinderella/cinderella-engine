// Code generated by github.com/wubin1989/gen. DO NOT EDIT.
// Code generated by github.com/wubin1989/gen. DO NOT EDIT.
// Code generated by github.com/wubin1989/gen. DO NOT EDIT.

package query

import (
	"context"
	"github.com/go-cinderella/cinderella-engine/engine/variable"

	gormgen "github.com/wubin1989/gen"
	"github.com/wubin1989/gorm"
	"github.com/wubin1989/gorm/clause"
	"github.com/wubin1989/gorm/schema"

	"github.com/wubin1989/gen/field"

	"github.com/wubin1989/dbresolver"
)

func newActHiVarinst(db *gorm.DB, opts ...gormgen.DOOption) actHiVarinst {
	_actHiVarinst := actHiVarinst{}

	_actHiVarinst.actHiVarinstDo.UseDB(db, opts...)
	_actHiVarinst.actHiVarinstDo.UseModel(&variable.HistoricVariable{})

	tableName := _actHiVarinst.actHiVarinstDo.TableName()
	_actHiVarinst.ALL = field.NewAsterisk(tableName)
	_actHiVarinst.ID = field.NewString(tableName, "id_")
	_actHiVarinst.Rev = field.NewInt32(tableName, "rev_")
	_actHiVarinst.ProcInstID = field.NewString(tableName, "proc_inst_id_")
	_actHiVarinst.ExecutionID = field.NewString(tableName, "execution_id_")
	_actHiVarinst.TaskID = field.NewString(tableName, "task_id_")
	_actHiVarinst.Name = field.NewString(tableName, "name_")
	_actHiVarinst.VarType = field.NewString(tableName, "var_type_")
	_actHiVarinst.ScopeID = field.NewString(tableName, "scope_id_")
	_actHiVarinst.SubScopeID = field.NewString(tableName, "sub_scope_id_")
	_actHiVarinst.ScopeType = field.NewString(tableName, "scope_type_")
	_actHiVarinst.BytearrayID = field.NewString(tableName, "bytearray_id_")
	_actHiVarinst.Double = field.NewFloat64(tableName, "double_")
	_actHiVarinst.Long = field.NewInt64(tableName, "long_")
	_actHiVarinst.Text = field.NewString(tableName, "text_")
	_actHiVarinst.Text2 = field.NewString(tableName, "text2_")
	_actHiVarinst.CreateTime = field.NewTime(tableName, "create_time_")
	_actHiVarinst.LastUpdatedTime = field.NewTime(tableName, "last_updated_time_")

	_actHiVarinst.fillFieldMap()

	return _actHiVarinst
}

type actHiVarinst struct {
	actHiVarinstDo

	ALL             field.Asterisk
	ID              field.String
	Rev             field.Int32
	ProcInstID      field.String
	ExecutionID     field.String
	TaskID          field.String
	Name            field.String
	VarType         field.String
	ScopeID         field.String
	SubScopeID      field.String
	ScopeType       field.String
	BytearrayID     field.String
	Double          field.Float64
	Long            field.Int64
	Text            field.String
	Text2           field.String
	CreateTime      field.Time
	LastUpdatedTime field.Time

	fieldMap map[string]field.Expr
}

func (a actHiVarinst) Table(newTableName string) *actHiVarinst {
	a.actHiVarinstDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a actHiVarinst) As(alias string) *actHiVarinst {
	a.actHiVarinstDo.DO = *(a.actHiVarinstDo.As(alias).(*gormgen.DO))
	return a.updateTableName(alias)
}

func (a *actHiVarinst) updateTableName(table string) *actHiVarinst {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "id_")
	a.Rev = field.NewInt32(table, "rev_")
	a.ProcInstID = field.NewString(table, "proc_inst_id_")
	a.ExecutionID = field.NewString(table, "execution_id_")
	a.TaskID = field.NewString(table, "task_id_")
	a.Name = field.NewString(table, "name_")
	a.VarType = field.NewString(table, "var_type_")
	a.ScopeID = field.NewString(table, "scope_id_")
	a.SubScopeID = field.NewString(table, "sub_scope_id_")
	a.ScopeType = field.NewString(table, "scope_type_")
	a.BytearrayID = field.NewString(table, "bytearray_id_")
	a.Double = field.NewFloat64(table, "double_")
	a.Long = field.NewInt64(table, "long_")
	a.Text = field.NewString(table, "text_")
	a.Text2 = field.NewString(table, "text2_")
	a.CreateTime = field.NewTime(table, "create_time_")
	a.LastUpdatedTime = field.NewTime(table, "last_updated_time_")

	a.fillFieldMap()

	return a
}

func (a *actHiVarinst) WithContext(ctx context.Context) IActHiVarinstDo {
	return a.actHiVarinstDo.WithContext(ctx)
}

func (a actHiVarinst) TableName() string { return a.actHiVarinstDo.TableName() }

func (a actHiVarinst) Alias() string { return a.actHiVarinstDo.Alias() }

func (a actHiVarinst) Columns(cols ...field.Expr) gormgen.Columns {
	return a.actHiVarinstDo.Columns(cols...)
}

func (a *actHiVarinst) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *actHiVarinst) GetFieldExprByName(fieldName string) (field.Expr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	return _f, ok
}

func (a *actHiVarinst) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 17)
	a.fieldMap["id_"] = a.ID
	a.fieldMap["rev_"] = a.Rev
	a.fieldMap["proc_inst_id_"] = a.ProcInstID
	a.fieldMap["execution_id_"] = a.ExecutionID
	a.fieldMap["task_id_"] = a.TaskID
	a.fieldMap["name_"] = a.Name
	a.fieldMap["var_type_"] = a.VarType
	a.fieldMap["scope_id_"] = a.ScopeID
	a.fieldMap["sub_scope_id_"] = a.SubScopeID
	a.fieldMap["scope_type_"] = a.ScopeType
	a.fieldMap["bytearray_id_"] = a.BytearrayID
	a.fieldMap["double_"] = a.Double
	a.fieldMap["long_"] = a.Long
	a.fieldMap["text_"] = a.Text
	a.fieldMap["text2_"] = a.Text2
	a.fieldMap["create_time_"] = a.CreateTime
	a.fieldMap["last_updated_time_"] = a.LastUpdatedTime
}

func (a actHiVarinst) Clone(db *gorm.DB) actHiVarinst {
	a.actHiVarinstDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a actHiVarinst) ReplaceDB(db *gorm.DB) actHiVarinst {
	a.actHiVarinstDo.ReplaceDB(db)
	return a
}

type actHiVarinstDo struct{ gormgen.DO }

type IActHiVarinstDo interface {
	gormgen.SubQuery
	Debug() IActHiVarinstDo
	WithContext(ctx context.Context) IActHiVarinstDo
	WithResult(fc func(tx gormgen.Dao)) gormgen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActHiVarinstDo
	WriteDB() IActHiVarinstDo
	As(alias string) gormgen.Dao
	Session(config *gorm.Session) IActHiVarinstDo
	Columns(cols ...field.Expr) gormgen.Columns
	Clauses(conds ...clause.Expression) IActHiVarinstDo
	Not(conds ...gormgen.Condition) IActHiVarinstDo
	Or(conds ...gormgen.Condition) IActHiVarinstDo
	Select(conds ...field.Expr) IActHiVarinstDo
	Where(conds ...gormgen.Condition) IActHiVarinstDo
	Order(conds ...field.Expr) IActHiVarinstDo
	Distinct(cols ...field.Expr) IActHiVarinstDo
	Omit(cols ...field.Expr) IActHiVarinstDo
	Join(table schema.Tabler, on ...field.Expr) IActHiVarinstDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActHiVarinstDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActHiVarinstDo
	Group(cols ...field.Expr) IActHiVarinstDo
	Having(conds ...gormgen.Condition) IActHiVarinstDo
	Limit(limit int) IActHiVarinstDo
	Offset(offset int) IActHiVarinstDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) IActHiVarinstDo
	Unscoped() IActHiVarinstDo
	Create(values ...*variable.HistoricVariable) error
	CreateInBatches(values []*variable.HistoricVariable, batchSize int) error
	Save(values ...*variable.HistoricVariable) error
	First() (*variable.HistoricVariable, error)
	Take() (*variable.HistoricVariable, error)
	Last() (*variable.HistoricVariable, error)
	Find() ([]*variable.HistoricVariable, error)
	FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*variable.HistoricVariable, err error)
	FindInBatches(result *[]*variable.HistoricVariable, batchSize int, fc func(tx gormgen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*variable.HistoricVariable) (info gormgen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	Updates(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateFrom(q gormgen.SubQuery) gormgen.Dao
	Attrs(attrs ...field.AssignExpr) IActHiVarinstDo
	Assign(attrs ...field.AssignExpr) IActHiVarinstDo
	Joins(fields ...field.RelationField) IActHiVarinstDo
	Preload(fields ...field.RelationField) IActHiVarinstDo
	FirstOrInit() (*variable.HistoricVariable, error)
	FirstOrCreate() (*variable.HistoricVariable, error)
	FindByPage(offset int, limit int) (result []*variable.HistoricVariable, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Fetch(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActHiVarinstDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a actHiVarinstDo) Debug() IActHiVarinstDo {
	return a.withDO(a.DO.Debug())
}

func (a actHiVarinstDo) WithContext(ctx context.Context) IActHiVarinstDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a actHiVarinstDo) ReadDB() IActHiVarinstDo {
	return a.Clauses(dbresolver.Read)
}

func (a actHiVarinstDo) WriteDB() IActHiVarinstDo {
	return a.Clauses(dbresolver.Write)
}

func (a actHiVarinstDo) Session(config *gorm.Session) IActHiVarinstDo {
	return a.withDO(a.DO.Session(config))
}

func (a actHiVarinstDo) Clauses(conds ...clause.Expression) IActHiVarinstDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a actHiVarinstDo) Returning(value interface{}, columns ...string) IActHiVarinstDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a actHiVarinstDo) Not(conds ...gormgen.Condition) IActHiVarinstDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a actHiVarinstDo) Or(conds ...gormgen.Condition) IActHiVarinstDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a actHiVarinstDo) Select(conds ...field.Expr) IActHiVarinstDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a actHiVarinstDo) Where(conds ...gormgen.Condition) IActHiVarinstDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a actHiVarinstDo) Order(conds ...field.Expr) IActHiVarinstDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a actHiVarinstDo) Distinct(cols ...field.Expr) IActHiVarinstDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a actHiVarinstDo) Omit(cols ...field.Expr) IActHiVarinstDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a actHiVarinstDo) Join(table schema.Tabler, on ...field.Expr) IActHiVarinstDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a actHiVarinstDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActHiVarinstDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a actHiVarinstDo) RightJoin(table schema.Tabler, on ...field.Expr) IActHiVarinstDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a actHiVarinstDo) Group(cols ...field.Expr) IActHiVarinstDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a actHiVarinstDo) Having(conds ...gormgen.Condition) IActHiVarinstDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a actHiVarinstDo) Limit(limit int) IActHiVarinstDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a actHiVarinstDo) Offset(offset int) IActHiVarinstDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a actHiVarinstDo) Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) IActHiVarinstDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a actHiVarinstDo) Unscoped() IActHiVarinstDo {
	return a.withDO(a.DO.Unscoped())
}

func (a actHiVarinstDo) Create(values ...*variable.HistoricVariable) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a actHiVarinstDo) CreateInBatches(values []*variable.HistoricVariable, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a actHiVarinstDo) Save(values ...*variable.HistoricVariable) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a actHiVarinstDo) First() (*variable.HistoricVariable, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*variable.HistoricVariable), nil
	}
}

func (a actHiVarinstDo) Take() (*variable.HistoricVariable, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*variable.HistoricVariable), nil
	}
}

func (a actHiVarinstDo) Last() (*variable.HistoricVariable, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*variable.HistoricVariable), nil
	}
}

func (a actHiVarinstDo) Find() ([]*variable.HistoricVariable, error) {
	result, err := a.DO.Find()
	return result.([]*variable.HistoricVariable), err
}

func (a actHiVarinstDo) FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*variable.HistoricVariable, err error) {
	buf := make([]*variable.HistoricVariable, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gormgen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a actHiVarinstDo) FindInBatches(result *[]*variable.HistoricVariable, batchSize int, fc func(tx gormgen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a actHiVarinstDo) Attrs(attrs ...field.AssignExpr) IActHiVarinstDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a actHiVarinstDo) Assign(attrs ...field.AssignExpr) IActHiVarinstDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a actHiVarinstDo) Joins(fields ...field.RelationField) IActHiVarinstDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a actHiVarinstDo) Preload(fields ...field.RelationField) IActHiVarinstDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a actHiVarinstDo) FirstOrInit() (*variable.HistoricVariable, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*variable.HistoricVariable), nil
	}
}

func (a actHiVarinstDo) FirstOrCreate() (*variable.HistoricVariable, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*variable.HistoricVariable), nil
	}
}

func (a actHiVarinstDo) FindByPage(offset int, limit int) (result []*variable.HistoricVariable, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a actHiVarinstDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a actHiVarinstDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a actHiVarinstDo) Fetch(result interface{}) (err error) {
	return a.DO.Fetch(result)
}

func (a actHiVarinstDo) Delete(models ...*variable.HistoricVariable) (result gormgen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *actHiVarinstDo) withDO(do gormgen.Dao) *actHiVarinstDo {
	a.DO = *do.(*gormgen.DO)
	return a
}

// Code generated by github.com/wubin1989/gen. DO NOT EDIT.
// Code generated by github.com/wubin1989/gen. DO NOT EDIT.
// Code generated by github.com/wubin1989/gen. DO NOT EDIT.

package query

import (
	"database/sql"

	gormgen "github.com/wubin1989/gen"
	"github.com/wubin1989/gorm"

	"github.com/wubin1989/dbresolver"
)

var (
	Q                 = new(Query)
	ActGeBytearray    *actGeBytearray
	ActHiActinst      *actHiActinst
	ActHiIdentitylink *actHiIdentitylink
	ActHiProcinst     *actHiProcinst
	ActHiTaskinst     *actHiTaskinst
	ActHiVarinst      *actHiVarinst
	ActReDeployment   *actReDeployment
	ActReProcdef      *actReProcdef
	ActRuExecution    *actRuExecution
	ActRuIdentitylink *actRuIdentitylink
	ActRuTask         *actRuTask
	ActRuVariable     *actRuVariable
)

func SetDefault(db *gorm.DB, opts ...gormgen.DOOption) {
	*Q = *Use(db, opts...)
	ActGeBytearray = &Q.ActGeBytearray
	ActHiActinst = &Q.ActHiActinst
	ActHiIdentitylink = &Q.ActHiIdentitylink
	ActHiProcinst = &Q.ActHiProcinst
	ActHiTaskinst = &Q.ActHiTaskinst
	ActHiVarinst = &Q.ActHiVarinst
	ActReDeployment = &Q.ActReDeployment
	ActReProcdef = &Q.ActReProcdef
	ActRuExecution = &Q.ActRuExecution
	ActRuIdentitylink = &Q.ActRuIdentitylink
	ActRuTask = &Q.ActRuTask
	ActRuVariable = &Q.ActRuVariable
}

func Use(db *gorm.DB, opts ...gormgen.DOOption) *Query {
	return &Query{
		db:                db,
		ActGeBytearray:    newActGeBytearray(db, opts...),
		ActHiActinst:      newActHiActinst(db, opts...),
		ActHiIdentitylink: newActHiIdentitylink(db, opts...),
		ActHiProcinst:     newActHiProcinst(db, opts...),
		ActHiTaskinst:     newActHiTaskinst(db, opts...),
		ActHiVarinst:      newActHiVarinst(db, opts...),
		ActReDeployment:   newActReDeployment(db, opts...),
		ActReProcdef:      newActReProcdef(db, opts...),
		ActRuExecution:    newActRuExecution(db, opts...),
		ActRuIdentitylink: newActRuIdentitylink(db, opts...),
		ActRuTask:         newActRuTask(db, opts...),
		ActRuVariable:     newActRuVariable(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	ActGeBytearray    actGeBytearray
	ActHiActinst      actHiActinst
	ActHiIdentitylink actHiIdentitylink
	ActHiProcinst     actHiProcinst
	ActHiTaskinst     actHiTaskinst

	ActHiVarinst actHiVarinst

	ActReDeployment actReDeployment

	ActReProcdef actReProcdef

	ActRuExecution actRuExecution

	ActRuIdentitylink actRuIdentitylink

	ActRuTask actRuTask

	ActRuVariable actRuVariable
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) Clone(db *gorm.DB) *Query {
	return &Query{
		db:                db,
		ActGeBytearray:    q.ActGeBytearray.Clone(db),
		ActHiActinst:      q.ActHiActinst.Clone(db),
		ActHiIdentitylink: q.ActHiIdentitylink.Clone(db),
		ActHiProcinst:     q.ActHiProcinst.Clone(db),
		ActHiTaskinst:     q.ActHiTaskinst.Clone(db),
		ActHiVarinst:      q.ActHiVarinst.Clone(db),

		ActReDeployment: q.ActReDeployment.Clone(db),

		ActReProcdef: q.ActReProcdef.Clone(db),

		ActRuExecution: q.ActRuExecution.Clone(db),

		ActRuIdentitylink: q.ActRuIdentitylink.Clone(db),

		ActRuTask: q.ActRuTask.Clone(db),

		ActRuVariable: q.ActRuVariable.Clone(db),
	}
}

func (q *Query) Db() *gorm.DB {
	return q.db
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db: db,

		ActGeBytearray: q.ActGeBytearray.ReplaceDB(db),

		ActHiActinst: q.ActHiActinst.ReplaceDB(db),

		ActHiIdentitylink: q.ActHiIdentitylink.ReplaceDB(db),
		ActHiProcinst:     q.ActHiProcinst.ReplaceDB(db),
		ActHiTaskinst:     q.ActHiTaskinst.ReplaceDB(db),

		ActHiVarinst: q.ActHiVarinst.ReplaceDB(db),

		ActReDeployment: q.ActReDeployment.ReplaceDB(db),

		ActReProcdef: q.ActReProcdef.ReplaceDB(db),

		ActRuExecution: q.ActRuExecution.ReplaceDB(db),

		ActRuIdentitylink: q.ActRuIdentitylink.ReplaceDB(db),

		ActRuTask: q.ActRuTask.ReplaceDB(db),

		ActRuVariable: q.ActRuVariable.ReplaceDB(db),
	}
}

type queryCtx struct {
	ActGeBytearray IActGeBytearrayDo

	ActHiActinst IActHiActinstDo

	ActHiIdentitylink IActHiIdentitylinkDo
	ActHiProcinst     IActHiProcinstDo
	ActHiTaskinst     IActHiTaskinstDo

	ActHiVarinst IActHiVarinstDo

	ActReDeployment IActReDeploymentDo

	ActReProcdef IActReProcdefDo

	ActRuExecution IActRuExecutionDo

	ActRuIdentitylink IActRuIdentitylinkDo

	ActRuTask IActRuTaskDo

	ActRuVariable IActRuVariableDo
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.Clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.Clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}

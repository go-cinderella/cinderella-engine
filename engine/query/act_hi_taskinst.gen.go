// Code generated by github.com/wubin1989/gen. DO NOT EDIT.
// Code generated by github.com/wubin1989/gen. DO NOT EDIT.
// Code generated by github.com/wubin1989/gen. DO NOT EDIT.

package query

import (
	"context"

	gormgen "github.com/wubin1989/gen"
	"github.com/wubin1989/gorm"
	"github.com/wubin1989/gorm/clause"
	"github.com/wubin1989/gorm/schema"

	"github.com/wubin1989/gen/field"

	"github.com/wubin1989/dbresolver"

	"github.com/go-cinderella/cinderella-engine/engine/model"
)

func newActHiTaskinst(db *gorm.DB, opts ...gormgen.DOOption) actHiTaskinst {
	_actHiTaskinst := actHiTaskinst{}

	_actHiTaskinst.actHiTaskinstDo.UseDB(db, opts...)
	_actHiTaskinst.actHiTaskinstDo.UseModel(&model.ActHiTaskinst{})

	tableName := _actHiTaskinst.actHiTaskinstDo.TableName()
	_actHiTaskinst.ALL = field.NewAsterisk(tableName)
	_actHiTaskinst.ID = field.NewString(tableName, "id_")
	_actHiTaskinst.Rev = field.NewInt32(tableName, "rev_")
	_actHiTaskinst.ProcDefID = field.NewString(tableName, "proc_def_id_")
	_actHiTaskinst.TaskDefID = field.NewString(tableName, "task_def_id_")
	_actHiTaskinst.TaskDefKey = field.NewString(tableName, "task_def_key_")
	_actHiTaskinst.ProcInstID = field.NewString(tableName, "proc_inst_id_")
	_actHiTaskinst.ExecutionID = field.NewString(tableName, "execution_id_")
	_actHiTaskinst.ScopeID = field.NewString(tableName, "scope_id_")
	_actHiTaskinst.SubScopeID = field.NewString(tableName, "sub_scope_id_")
	_actHiTaskinst.ScopeType = field.NewString(tableName, "scope_type_")
	_actHiTaskinst.ScopeDefinitionID = field.NewString(tableName, "scope_definition_id_")
	_actHiTaskinst.PropagatedStageInstID = field.NewString(tableName, "propagated_stage_inst_id_")
	_actHiTaskinst.Name = field.NewString(tableName, "name_")
	_actHiTaskinst.ParentTaskID = field.NewString(tableName, "parent_task_id_")
	_actHiTaskinst.Description = field.NewString(tableName, "description_")
	_actHiTaskinst.Owner = field.NewString(tableName, "owner_")
	_actHiTaskinst.Assignee = field.NewString(tableName, "assignee_")
	_actHiTaskinst.StartTime = field.NewTime(tableName, "start_time_")
	_actHiTaskinst.ClaimTime = field.NewTime(tableName, "claim_time_")
	_actHiTaskinst.EndTime = field.NewTime(tableName, "end_time_")
	_actHiTaskinst.Duration = field.NewInt64(tableName, "duration_")
	_actHiTaskinst.DeleteReason = field.NewString(tableName, "delete_reason_")
	_actHiTaskinst.Priority = field.NewInt32(tableName, "priority_")
	_actHiTaskinst.DueDate = field.NewTime(tableName, "due_date_")
	_actHiTaskinst.FormKey = field.NewString(tableName, "form_key_")
	_actHiTaskinst.Category = field.NewString(tableName, "category_")
	_actHiTaskinst.TenantID = field.NewString(tableName, "tenant_id_")
	_actHiTaskinst.LastUpdatedTime = field.NewTime(tableName, "last_updated_time_")

	_actHiTaskinst.fillFieldMap()

	return _actHiTaskinst
}

type actHiTaskinst struct {
	actHiTaskinstDo

	ALL                   field.Asterisk
	ID                    field.String
	Rev                   field.Int32
	ProcDefID             field.String
	TaskDefID             field.String
	TaskDefKey            field.String
	ProcInstID            field.String
	ExecutionID           field.String
	ScopeID               field.String
	SubScopeID            field.String
	ScopeType             field.String
	ScopeDefinitionID     field.String
	PropagatedStageInstID field.String
	Name                  field.String
	ParentTaskID          field.String
	Description           field.String
	Owner                 field.String
	Assignee              field.String
	StartTime             field.Time
	ClaimTime             field.Time
	EndTime               field.Time
	Duration              field.Int64
	DeleteReason          field.String
	Priority              field.Int32
	DueDate               field.Time
	FormKey               field.String
	Category              field.String
	TenantID              field.String
	LastUpdatedTime       field.Time

	fieldMap map[string]field.Expr
}

func (a actHiTaskinst) Table(newTableName string) *actHiTaskinst {
	a.actHiTaskinstDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a actHiTaskinst) As(alias string) *actHiTaskinst {
	a.actHiTaskinstDo.DO = *(a.actHiTaskinstDo.As(alias).(*gormgen.DO))
	return a.updateTableName(alias)
}

func (a *actHiTaskinst) updateTableName(table string) *actHiTaskinst {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "id_")
	a.Rev = field.NewInt32(table, "rev_")
	a.ProcDefID = field.NewString(table, "proc_def_id_")
	a.TaskDefID = field.NewString(table, "task_def_id_")
	a.TaskDefKey = field.NewString(table, "task_def_key_")
	a.ProcInstID = field.NewString(table, "proc_inst_id_")
	a.ExecutionID = field.NewString(table, "execution_id_")
	a.ScopeID = field.NewString(table, "scope_id_")
	a.SubScopeID = field.NewString(table, "sub_scope_id_")
	a.ScopeType = field.NewString(table, "scope_type_")
	a.ScopeDefinitionID = field.NewString(table, "scope_definition_id_")
	a.PropagatedStageInstID = field.NewString(table, "propagated_stage_inst_id_")
	a.Name = field.NewString(table, "name_")
	a.ParentTaskID = field.NewString(table, "parent_task_id_")
	a.Description = field.NewString(table, "description_")
	a.Owner = field.NewString(table, "owner_")
	a.Assignee = field.NewString(table, "assignee_")
	a.StartTime = field.NewTime(table, "start_time_")
	a.ClaimTime = field.NewTime(table, "claim_time_")
	a.EndTime = field.NewTime(table, "end_time_")
	a.Duration = field.NewInt64(table, "duration_")
	a.DeleteReason = field.NewString(table, "delete_reason_")
	a.Priority = field.NewInt32(table, "priority_")
	a.DueDate = field.NewTime(table, "due_date_")
	a.FormKey = field.NewString(table, "form_key_")
	a.Category = field.NewString(table, "category_")
	a.TenantID = field.NewString(table, "tenant_id_")
	a.LastUpdatedTime = field.NewTime(table, "last_updated_time_")

	a.fillFieldMap()

	return a
}

func (a *actHiTaskinst) WithContext(ctx context.Context) IActHiTaskinstDo {
	return a.actHiTaskinstDo.WithContext(ctx)
}

func (a actHiTaskinst) TableName() string { return a.actHiTaskinstDo.TableName() }

func (a actHiTaskinst) Alias() string { return a.actHiTaskinstDo.Alias() }

func (a actHiTaskinst) Columns(cols ...field.Expr) gormgen.Columns {
	return a.actHiTaskinstDo.Columns(cols...)
}

func (a *actHiTaskinst) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *actHiTaskinst) GetFieldExprByName(fieldName string) (field.Expr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	return _f, ok
}

func (a *actHiTaskinst) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 28)
	a.fieldMap["id_"] = a.ID
	a.fieldMap["rev_"] = a.Rev
	a.fieldMap["proc_def_id_"] = a.ProcDefID
	a.fieldMap["task_def_id_"] = a.TaskDefID
	a.fieldMap["task_def_key_"] = a.TaskDefKey
	a.fieldMap["proc_inst_id_"] = a.ProcInstID
	a.fieldMap["execution_id_"] = a.ExecutionID
	a.fieldMap["scope_id_"] = a.ScopeID
	a.fieldMap["sub_scope_id_"] = a.SubScopeID
	a.fieldMap["scope_type_"] = a.ScopeType
	a.fieldMap["scope_definition_id_"] = a.ScopeDefinitionID
	a.fieldMap["propagated_stage_inst_id_"] = a.PropagatedStageInstID
	a.fieldMap["name_"] = a.Name
	a.fieldMap["parent_task_id_"] = a.ParentTaskID
	a.fieldMap["description_"] = a.Description
	a.fieldMap["owner_"] = a.Owner
	a.fieldMap["assignee_"] = a.Assignee
	a.fieldMap["start_time_"] = a.StartTime
	a.fieldMap["claim_time_"] = a.ClaimTime
	a.fieldMap["end_time_"] = a.EndTime
	a.fieldMap["duration_"] = a.Duration
	a.fieldMap["delete_reason_"] = a.DeleteReason
	a.fieldMap["priority_"] = a.Priority
	a.fieldMap["due_date_"] = a.DueDate
	a.fieldMap["form_key_"] = a.FormKey
	a.fieldMap["category_"] = a.Category
	a.fieldMap["tenant_id_"] = a.TenantID
	a.fieldMap["last_updated_time_"] = a.LastUpdatedTime
}

func (a actHiTaskinst) Clone(db *gorm.DB) actHiTaskinst {
	a.actHiTaskinstDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a actHiTaskinst) ReplaceDB(db *gorm.DB) actHiTaskinst {
	a.actHiTaskinstDo.ReplaceDB(db)
	return a
}

type actHiTaskinstDo struct{ gormgen.DO }

type IActHiTaskinstDo interface {
	gormgen.SubQuery
	Debug() IActHiTaskinstDo
	WithContext(ctx context.Context) IActHiTaskinstDo
	WithResult(fc func(tx gormgen.Dao)) gormgen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActHiTaskinstDo
	WriteDB() IActHiTaskinstDo
	As(alias string) gormgen.Dao
	Session(config *gorm.Session) IActHiTaskinstDo
	Columns(cols ...field.Expr) gormgen.Columns
	Clauses(conds ...clause.Expression) IActHiTaskinstDo
	Not(conds ...gormgen.Condition) IActHiTaskinstDo
	Or(conds ...gormgen.Condition) IActHiTaskinstDo
	Select(conds ...field.Expr) IActHiTaskinstDo
	Where(conds ...gormgen.Condition) IActHiTaskinstDo
	Order(conds ...field.Expr) IActHiTaskinstDo
	Distinct(cols ...field.Expr) IActHiTaskinstDo
	Omit(cols ...field.Expr) IActHiTaskinstDo
	Join(table schema.Tabler, on ...field.Expr) IActHiTaskinstDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActHiTaskinstDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActHiTaskinstDo
	Group(cols ...field.Expr) IActHiTaskinstDo
	Having(conds ...gormgen.Condition) IActHiTaskinstDo
	Limit(limit int) IActHiTaskinstDo
	Offset(offset int) IActHiTaskinstDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) IActHiTaskinstDo
	Unscoped() IActHiTaskinstDo
	Create(values ...*model.ActHiTaskinst) error
	CreateInBatches(values []*model.ActHiTaskinst, batchSize int) error
	Save(values ...*model.ActHiTaskinst) error
	First() (*model.ActHiTaskinst, error)
	Take() (*model.ActHiTaskinst, error)
	Last() (*model.ActHiTaskinst, error)
	Find() ([]*model.ActHiTaskinst, error)
	FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.ActHiTaskinst, err error)
	FindInBatches(result *[]*model.ActHiTaskinst, batchSize int, fc func(tx gormgen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ActHiTaskinst) (info gormgen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	Updates(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateFrom(q gormgen.SubQuery) gormgen.Dao
	Attrs(attrs ...field.AssignExpr) IActHiTaskinstDo
	Assign(attrs ...field.AssignExpr) IActHiTaskinstDo
	Joins(fields ...field.RelationField) IActHiTaskinstDo
	Preload(fields ...field.RelationField) IActHiTaskinstDo
	FirstOrInit() (*model.ActHiTaskinst, error)
	FirstOrCreate() (*model.ActHiTaskinst, error)
	FindByPage(offset int, limit int) (result []*model.ActHiTaskinst, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Fetch(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActHiTaskinstDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a actHiTaskinstDo) Debug() IActHiTaskinstDo {
	return a.withDO(a.DO.Debug())
}

func (a actHiTaskinstDo) WithContext(ctx context.Context) IActHiTaskinstDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a actHiTaskinstDo) ReadDB() IActHiTaskinstDo {
	return a.Clauses(dbresolver.Read)
}

func (a actHiTaskinstDo) WriteDB() IActHiTaskinstDo {
	return a.Clauses(dbresolver.Write)
}

func (a actHiTaskinstDo) Session(config *gorm.Session) IActHiTaskinstDo {
	return a.withDO(a.DO.Session(config))
}

func (a actHiTaskinstDo) Clauses(conds ...clause.Expression) IActHiTaskinstDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a actHiTaskinstDo) Returning(value interface{}, columns ...string) IActHiTaskinstDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a actHiTaskinstDo) Not(conds ...gormgen.Condition) IActHiTaskinstDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a actHiTaskinstDo) Or(conds ...gormgen.Condition) IActHiTaskinstDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a actHiTaskinstDo) Select(conds ...field.Expr) IActHiTaskinstDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a actHiTaskinstDo) Where(conds ...gormgen.Condition) IActHiTaskinstDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a actHiTaskinstDo) Order(conds ...field.Expr) IActHiTaskinstDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a actHiTaskinstDo) Distinct(cols ...field.Expr) IActHiTaskinstDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a actHiTaskinstDo) Omit(cols ...field.Expr) IActHiTaskinstDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a actHiTaskinstDo) Join(table schema.Tabler, on ...field.Expr) IActHiTaskinstDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a actHiTaskinstDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActHiTaskinstDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a actHiTaskinstDo) RightJoin(table schema.Tabler, on ...field.Expr) IActHiTaskinstDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a actHiTaskinstDo) Group(cols ...field.Expr) IActHiTaskinstDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a actHiTaskinstDo) Having(conds ...gormgen.Condition) IActHiTaskinstDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a actHiTaskinstDo) Limit(limit int) IActHiTaskinstDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a actHiTaskinstDo) Offset(offset int) IActHiTaskinstDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a actHiTaskinstDo) Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) IActHiTaskinstDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a actHiTaskinstDo) Unscoped() IActHiTaskinstDo {
	return a.withDO(a.DO.Unscoped())
}

func (a actHiTaskinstDo) Create(values ...*model.ActHiTaskinst) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a actHiTaskinstDo) CreateInBatches(values []*model.ActHiTaskinst, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a actHiTaskinstDo) Save(values ...*model.ActHiTaskinst) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a actHiTaskinstDo) First() (*model.ActHiTaskinst, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActHiTaskinst), nil
	}
}

func (a actHiTaskinstDo) Take() (*model.ActHiTaskinst, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActHiTaskinst), nil
	}
}

func (a actHiTaskinstDo) Last() (*model.ActHiTaskinst, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActHiTaskinst), nil
	}
}

func (a actHiTaskinstDo) Find() ([]*model.ActHiTaskinst, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActHiTaskinst), err
}

func (a actHiTaskinstDo) FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.ActHiTaskinst, err error) {
	buf := make([]*model.ActHiTaskinst, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gormgen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a actHiTaskinstDo) FindInBatches(result *[]*model.ActHiTaskinst, batchSize int, fc func(tx gormgen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a actHiTaskinstDo) Attrs(attrs ...field.AssignExpr) IActHiTaskinstDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a actHiTaskinstDo) Assign(attrs ...field.AssignExpr) IActHiTaskinstDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a actHiTaskinstDo) Joins(fields ...field.RelationField) IActHiTaskinstDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a actHiTaskinstDo) Preload(fields ...field.RelationField) IActHiTaskinstDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a actHiTaskinstDo) FirstOrInit() (*model.ActHiTaskinst, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActHiTaskinst), nil
	}
}

func (a actHiTaskinstDo) FirstOrCreate() (*model.ActHiTaskinst, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActHiTaskinst), nil
	}
}

func (a actHiTaskinstDo) FindByPage(offset int, limit int) (result []*model.ActHiTaskinst, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a actHiTaskinstDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a actHiTaskinstDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a actHiTaskinstDo) Fetch(result interface{}) (err error) {
	return a.DO.Fetch(result)
}

func (a actHiTaskinstDo) Delete(models ...*model.ActHiTaskinst) (result gormgen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *actHiTaskinstDo) withDO(do gormgen.Dao) *actHiTaskinstDo {
	a.DO = *do.(*gormgen.DO)
	return a
}

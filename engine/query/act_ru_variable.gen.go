// Code generated by github.com/wubin1989/gen. DO NOT EDIT.
// Code generated by github.com/wubin1989/gen. DO NOT EDIT.
// Code generated by github.com/wubin1989/gen. DO NOT EDIT.

package query

import (
	"context"
	"github.com/go-cinderella/cinderella-engine/engine/variable"

	gormgen "github.com/wubin1989/gen"
	"github.com/wubin1989/gorm"
	"github.com/wubin1989/gorm/clause"
	"github.com/wubin1989/gorm/schema"

	"github.com/wubin1989/gen/field"

	"github.com/wubin1989/dbresolver"
)

func newActRuVariable(db *gorm.DB, opts ...gormgen.DOOption) actRuVariable {
	_actRuVariable := actRuVariable{}

	_actRuVariable.actRuVariableDo.UseDB(db, opts...)
	_actRuVariable.actRuVariableDo.UseModel(&variable.Variable{})

	tableName := _actRuVariable.actRuVariableDo.TableName()
	_actRuVariable.ALL = field.NewAsterisk(tableName)
	_actRuVariable.ID = field.NewString(tableName, "id_")
	_actRuVariable.Rev = field.NewInt32(tableName, "rev_")
	_actRuVariable.Type = field.NewString(tableName, "type_")
	_actRuVariable.Name = field.NewString(tableName, "name_")
	_actRuVariable.ExecutionID = field.NewString(tableName, "execution_id_")
	_actRuVariable.ProcInstID = field.NewString(tableName, "proc_inst_id_")
	_actRuVariable.TaskID = field.NewString(tableName, "task_id_")
	_actRuVariable.ScopeID = field.NewString(tableName, "scope_id_")
	_actRuVariable.SubScopeID = field.NewString(tableName, "sub_scope_id_")
	_actRuVariable.ScopeType = field.NewString(tableName, "scope_type_")
	_actRuVariable.BytearrayID = field.NewString(tableName, "bytearray_id_")
	_actRuVariable.Double = field.NewFloat64(tableName, "double_")
	_actRuVariable.Long = field.NewInt64(tableName, "long_")
	_actRuVariable.Text = field.NewString(tableName, "text_")
	_actRuVariable.Text2 = field.NewString(tableName, "text2_")

	_actRuVariable.fillFieldMap()

	return _actRuVariable
}

type actRuVariable struct {
	actRuVariableDo

	ALL         field.Asterisk
	ID          field.String
	Rev         field.Int32
	Type        field.String
	Name        field.String
	ExecutionID field.String
	ProcInstID  field.String
	TaskID      field.String
	ScopeID     field.String
	SubScopeID  field.String
	ScopeType   field.String
	BytearrayID field.String
	Double      field.Float64
	Long        field.Int64
	Text        field.String
	Text2       field.String

	fieldMap map[string]field.Expr
}

func (a actRuVariable) Table(newTableName string) *actRuVariable {
	a.actRuVariableDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a actRuVariable) As(alias string) *actRuVariable {
	a.actRuVariableDo.DO = *(a.actRuVariableDo.As(alias).(*gormgen.DO))
	return a.updateTableName(alias)
}

func (a *actRuVariable) updateTableName(table string) *actRuVariable {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "id_")
	a.Rev = field.NewInt32(table, "rev_")
	a.Type = field.NewString(table, "type_")
	a.Name = field.NewString(table, "name_")
	a.ExecutionID = field.NewString(table, "execution_id_")
	a.ProcInstID = field.NewString(table, "proc_inst_id_")
	a.TaskID = field.NewString(table, "task_id_")
	a.ScopeID = field.NewString(table, "scope_id_")
	a.SubScopeID = field.NewString(table, "sub_scope_id_")
	a.ScopeType = field.NewString(table, "scope_type_")
	a.BytearrayID = field.NewString(table, "bytearray_id_")
	a.Double = field.NewFloat64(table, "double_")
	a.Long = field.NewInt64(table, "long_")
	a.Text = field.NewString(table, "text_")
	a.Text2 = field.NewString(table, "text2_")

	a.fillFieldMap()

	return a
}

func (a *actRuVariable) WithContext(ctx context.Context) IActRuVariableDo {
	return a.actRuVariableDo.WithContext(ctx)
}

func (a actRuVariable) TableName() string { return a.actRuVariableDo.TableName() }

func (a actRuVariable) Alias() string { return a.actRuVariableDo.Alias() }

func (a actRuVariable) Columns(cols ...field.Expr) gormgen.Columns {
	return a.actRuVariableDo.Columns(cols...)
}

func (a *actRuVariable) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *actRuVariable) GetFieldExprByName(fieldName string) (field.Expr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	return _f, ok
}

func (a *actRuVariable) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 15)
	a.fieldMap["id_"] = a.ID
	a.fieldMap["rev_"] = a.Rev
	a.fieldMap["type_"] = a.Type
	a.fieldMap["name_"] = a.Name
	a.fieldMap["execution_id_"] = a.ExecutionID
	a.fieldMap["proc_inst_id_"] = a.ProcInstID
	a.fieldMap["task_id_"] = a.TaskID
	a.fieldMap["scope_id_"] = a.ScopeID
	a.fieldMap["sub_scope_id_"] = a.SubScopeID
	a.fieldMap["scope_type_"] = a.ScopeType
	a.fieldMap["bytearray_id_"] = a.BytearrayID
	a.fieldMap["double_"] = a.Double
	a.fieldMap["long_"] = a.Long
	a.fieldMap["text_"] = a.Text
	a.fieldMap["text2_"] = a.Text2
}

func (a actRuVariable) Clone(db *gorm.DB) actRuVariable {
	a.actRuVariableDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a actRuVariable) ReplaceDB(db *gorm.DB) actRuVariable {
	a.actRuVariableDo.ReplaceDB(db)
	return a
}

type actRuVariableDo struct{ gormgen.DO }

type IActRuVariableDo interface {
	gormgen.SubQuery
	Debug() IActRuVariableDo
	WithContext(ctx context.Context) IActRuVariableDo
	WithResult(fc func(tx gormgen.Dao)) gormgen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActRuVariableDo
	WriteDB() IActRuVariableDo
	As(alias string) gormgen.Dao
	Session(config *gorm.Session) IActRuVariableDo
	Columns(cols ...field.Expr) gormgen.Columns
	Clauses(conds ...clause.Expression) IActRuVariableDo
	Not(conds ...gormgen.Condition) IActRuVariableDo
	Or(conds ...gormgen.Condition) IActRuVariableDo
	Select(conds ...field.Expr) IActRuVariableDo
	Where(conds ...gormgen.Condition) IActRuVariableDo
	Order(conds ...field.Expr) IActRuVariableDo
	Distinct(cols ...field.Expr) IActRuVariableDo
	Omit(cols ...field.Expr) IActRuVariableDo
	Join(table schema.Tabler, on ...field.Expr) IActRuVariableDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActRuVariableDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActRuVariableDo
	Group(cols ...field.Expr) IActRuVariableDo
	Having(conds ...gormgen.Condition) IActRuVariableDo
	Limit(limit int) IActRuVariableDo
	Offset(offset int) IActRuVariableDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) IActRuVariableDo
	Unscoped() IActRuVariableDo
	Create(values ...*variable.Variable) error
	CreateInBatches(values []*variable.Variable, batchSize int) error
	Save(values ...*variable.Variable) error
	First() (*variable.Variable, error)
	Take() (*variable.Variable, error)
	Last() (*variable.Variable, error)
	Find() ([]*variable.Variable, error)
	FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*variable.Variable, err error)
	FindInBatches(result *[]*variable.Variable, batchSize int, fc func(tx gormgen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*variable.Variable) (info gormgen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	Updates(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateFrom(q gormgen.SubQuery) gormgen.Dao
	Attrs(attrs ...field.AssignExpr) IActRuVariableDo
	Assign(attrs ...field.AssignExpr) IActRuVariableDo
	Joins(fields ...field.RelationField) IActRuVariableDo
	Preload(fields ...field.RelationField) IActRuVariableDo
	FirstOrInit() (*variable.Variable, error)
	FirstOrCreate() (*variable.Variable, error)
	FindByPage(offset int, limit int) (result []*variable.Variable, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Fetch(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActRuVariableDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a actRuVariableDo) Debug() IActRuVariableDo {
	return a.withDO(a.DO.Debug())
}

func (a actRuVariableDo) WithContext(ctx context.Context) IActRuVariableDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a actRuVariableDo) ReadDB() IActRuVariableDo {
	return a.Clauses(dbresolver.Read)
}

func (a actRuVariableDo) WriteDB() IActRuVariableDo {
	return a.Clauses(dbresolver.Write)
}

func (a actRuVariableDo) Session(config *gorm.Session) IActRuVariableDo {
	return a.withDO(a.DO.Session(config))
}

func (a actRuVariableDo) Clauses(conds ...clause.Expression) IActRuVariableDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a actRuVariableDo) Returning(value interface{}, columns ...string) IActRuVariableDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a actRuVariableDo) Not(conds ...gormgen.Condition) IActRuVariableDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a actRuVariableDo) Or(conds ...gormgen.Condition) IActRuVariableDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a actRuVariableDo) Select(conds ...field.Expr) IActRuVariableDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a actRuVariableDo) Where(conds ...gormgen.Condition) IActRuVariableDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a actRuVariableDo) Order(conds ...field.Expr) IActRuVariableDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a actRuVariableDo) Distinct(cols ...field.Expr) IActRuVariableDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a actRuVariableDo) Omit(cols ...field.Expr) IActRuVariableDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a actRuVariableDo) Join(table schema.Tabler, on ...field.Expr) IActRuVariableDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a actRuVariableDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActRuVariableDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a actRuVariableDo) RightJoin(table schema.Tabler, on ...field.Expr) IActRuVariableDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a actRuVariableDo) Group(cols ...field.Expr) IActRuVariableDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a actRuVariableDo) Having(conds ...gormgen.Condition) IActRuVariableDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a actRuVariableDo) Limit(limit int) IActRuVariableDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a actRuVariableDo) Offset(offset int) IActRuVariableDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a actRuVariableDo) Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) IActRuVariableDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a actRuVariableDo) Unscoped() IActRuVariableDo {
	return a.withDO(a.DO.Unscoped())
}

func (a actRuVariableDo) Create(values ...*variable.Variable) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a actRuVariableDo) CreateInBatches(values []*variable.Variable, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a actRuVariableDo) Save(values ...*variable.Variable) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a actRuVariableDo) First() (*variable.Variable, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*variable.Variable), nil
	}
}

func (a actRuVariableDo) Take() (*variable.Variable, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*variable.Variable), nil
	}
}

func (a actRuVariableDo) Last() (*variable.Variable, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*variable.Variable), nil
	}
}

func (a actRuVariableDo) Find() ([]*variable.Variable, error) {
	result, err := a.DO.Find()
	return result.([]*variable.Variable), err
}

func (a actRuVariableDo) FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*variable.Variable, err error) {
	buf := make([]*variable.Variable, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gormgen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a actRuVariableDo) FindInBatches(result *[]*variable.Variable, batchSize int, fc func(tx gormgen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a actRuVariableDo) Attrs(attrs ...field.AssignExpr) IActRuVariableDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a actRuVariableDo) Assign(attrs ...field.AssignExpr) IActRuVariableDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a actRuVariableDo) Joins(fields ...field.RelationField) IActRuVariableDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a actRuVariableDo) Preload(fields ...field.RelationField) IActRuVariableDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a actRuVariableDo) FirstOrInit() (*variable.Variable, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*variable.Variable), nil
	}
}

func (a actRuVariableDo) FirstOrCreate() (*variable.Variable, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*variable.Variable), nil
	}
}

func (a actRuVariableDo) FindByPage(offset int, limit int) (result []*variable.Variable, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a actRuVariableDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a actRuVariableDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a actRuVariableDo) Fetch(result interface{}) (err error) {
	return a.DO.Fetch(result)
}

func (a actRuVariableDo) Delete(models ...*variable.Variable) (result gormgen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *actRuVariableDo) withDO(do gormgen.Dao) *actRuVariableDo {
	a.DO = *do.(*gormgen.DO)
	return a
}

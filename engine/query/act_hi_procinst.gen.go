// Code generated by github.com/wubin1989/gen. DO NOT EDIT.
// Code generated by github.com/wubin1989/gen. DO NOT EDIT.
// Code generated by github.com/wubin1989/gen. DO NOT EDIT.

package query

import (
	"context"

	gormgen "github.com/wubin1989/gen"
	"github.com/wubin1989/gorm"
	"github.com/wubin1989/gorm/clause"
	"github.com/wubin1989/gorm/schema"

	"github.com/wubin1989/gen/field"

	"github.com/wubin1989/dbresolver"

	"github.com/go-cinderella/cinderella-engine/engine/model"
)

func newActHiProcinst(db *gorm.DB, opts ...gormgen.DOOption) actHiProcinst {
	_actHiProcinst := actHiProcinst{}

	_actHiProcinst.actHiProcinstDo.UseDB(db, opts...)
	_actHiProcinst.actHiProcinstDo.UseModel(&model.ActHiProcinst{})

	tableName := _actHiProcinst.actHiProcinstDo.TableName()
	_actHiProcinst.ALL = field.NewAsterisk(tableName)
	_actHiProcinst.ID = field.NewString(tableName, "id_")
	_actHiProcinst.Rev = field.NewInt32(tableName, "rev_")
	_actHiProcinst.ProcInstID = field.NewString(tableName, "proc_inst_id_")
	_actHiProcinst.BusinessKey = field.NewString(tableName, "business_key_")
	_actHiProcinst.ProcDefID = field.NewString(tableName, "proc_def_id_")
	_actHiProcinst.StartTime = field.NewTime(tableName, "start_time_")
	_actHiProcinst.EndTime = field.NewTime(tableName, "end_time_")
	_actHiProcinst.Duration = field.NewInt64(tableName, "duration_")
	_actHiProcinst.StartUserID = field.NewString(tableName, "start_user_id_")
	_actHiProcinst.StartActID = field.NewString(tableName, "start_act_id_")
	_actHiProcinst.EndActID = field.NewString(tableName, "end_act_id_")
	_actHiProcinst.SuperProcessInstanceID = field.NewString(tableName, "super_process_instance_id_")
	_actHiProcinst.DeleteReason = field.NewString(tableName, "delete_reason_")
	_actHiProcinst.TenantID = field.NewString(tableName, "tenant_id_")
	_actHiProcinst.Name = field.NewString(tableName, "name_")
	_actHiProcinst.CallbackID = field.NewString(tableName, "callback_id_")
	_actHiProcinst.CallbackType = field.NewString(tableName, "callback_type_")
	_actHiProcinst.ReferenceID = field.NewString(tableName, "reference_id_")
	_actHiProcinst.ReferenceType = field.NewString(tableName, "reference_type_")
	_actHiProcinst.PropagatedStageInstID = field.NewString(tableName, "propagated_stage_inst_id_")
	_actHiProcinst.BusinessStatus = field.NewString(tableName, "business_status_")

	_actHiProcinst.fillFieldMap()

	return _actHiProcinst
}

type actHiProcinst struct {
	actHiProcinstDo

	ALL                    field.Asterisk
	ID                     field.String
	Rev                    field.Int32
	ProcInstID             field.String
	BusinessKey            field.String
	ProcDefID              field.String
	StartTime              field.Time
	EndTime                field.Time
	Duration               field.Int64
	StartUserID            field.String
	StartActID             field.String
	EndActID               field.String
	SuperProcessInstanceID field.String
	DeleteReason           field.String
	TenantID               field.String
	Name                   field.String
	CallbackID             field.String
	CallbackType           field.String
	ReferenceID            field.String
	ReferenceType          field.String
	PropagatedStageInstID  field.String
	BusinessStatus         field.String

	fieldMap map[string]field.Expr
}

func (a actHiProcinst) Table(newTableName string) *actHiProcinst {
	a.actHiProcinstDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a actHiProcinst) As(alias string) *actHiProcinst {
	a.actHiProcinstDo.DO = *(a.actHiProcinstDo.As(alias).(*gormgen.DO))
	return a.updateTableName(alias)
}

func (a *actHiProcinst) updateTableName(table string) *actHiProcinst {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "id_")
	a.Rev = field.NewInt32(table, "rev_")
	a.ProcInstID = field.NewString(table, "proc_inst_id_")
	a.BusinessKey = field.NewString(table, "business_key_")
	a.ProcDefID = field.NewString(table, "proc_def_id_")
	a.StartTime = field.NewTime(table, "start_time_")
	a.EndTime = field.NewTime(table, "end_time_")
	a.Duration = field.NewInt64(table, "duration_")
	a.StartUserID = field.NewString(table, "start_user_id_")
	a.StartActID = field.NewString(table, "start_act_id_")
	a.EndActID = field.NewString(table, "end_act_id_")
	a.SuperProcessInstanceID = field.NewString(table, "super_process_instance_id_")
	a.DeleteReason = field.NewString(table, "delete_reason_")
	a.TenantID = field.NewString(table, "tenant_id_")
	a.Name = field.NewString(table, "name_")
	a.CallbackID = field.NewString(table, "callback_id_")
	a.CallbackType = field.NewString(table, "callback_type_")
	a.ReferenceID = field.NewString(table, "reference_id_")
	a.ReferenceType = field.NewString(table, "reference_type_")
	a.PropagatedStageInstID = field.NewString(table, "propagated_stage_inst_id_")
	a.BusinessStatus = field.NewString(table, "business_status_")

	a.fillFieldMap()

	return a
}

func (a *actHiProcinst) WithContext(ctx context.Context) IActHiProcinstDo {
	return a.actHiProcinstDo.WithContext(ctx)
}

func (a actHiProcinst) TableName() string { return a.actHiProcinstDo.TableName() }

func (a actHiProcinst) Alias() string { return a.actHiProcinstDo.Alias() }

func (a actHiProcinst) Columns(cols ...field.Expr) gormgen.Columns {
	return a.actHiProcinstDo.Columns(cols...)
}

func (a *actHiProcinst) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *actHiProcinst) GetFieldExprByName(fieldName string) (field.Expr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	return _f, ok
}

func (a *actHiProcinst) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 22)
	a.fieldMap["id_"] = a.ID
	a.fieldMap["rev_"] = a.Rev
	a.fieldMap["proc_inst_id_"] = a.ProcInstID
	a.fieldMap["business_key_"] = a.BusinessKey
	a.fieldMap["proc_def_id_"] = a.ProcDefID
	a.fieldMap["start_time_"] = a.StartTime
	a.fieldMap["end_time_"] = a.EndTime
	a.fieldMap["duration_"] = a.Duration
	a.fieldMap["start_user_id_"] = a.StartUserID
	a.fieldMap["start_act_id_"] = a.StartActID
	a.fieldMap["end_act_id_"] = a.EndActID
	a.fieldMap["super_process_instance_id_"] = a.SuperProcessInstanceID
	a.fieldMap["delete_reason_"] = a.DeleteReason
	a.fieldMap["tenant_id_"] = a.TenantID
	a.fieldMap["name_"] = a.Name
	a.fieldMap["callback_id_"] = a.CallbackID
	a.fieldMap["callback_type_"] = a.CallbackType
	a.fieldMap["reference_id_"] = a.ReferenceID
	a.fieldMap["reference_type_"] = a.ReferenceType
	a.fieldMap["propagated_stage_inst_id_"] = a.PropagatedStageInstID
	a.fieldMap["business_status_"] = a.BusinessStatus
}

func (a actHiProcinst) Clone(db *gorm.DB) actHiProcinst {
	a.actHiProcinstDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a actHiProcinst) ReplaceDB(db *gorm.DB) actHiProcinst {
	a.actHiProcinstDo.ReplaceDB(db)
	return a
}

type actHiProcinstDo struct{ gormgen.DO }

type IActHiProcinstDo interface {
	gormgen.SubQuery
	Debug() IActHiProcinstDo
	WithContext(ctx context.Context) IActHiProcinstDo
	WithResult(fc func(tx gormgen.Dao)) gormgen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActHiProcinstDo
	WriteDB() IActHiProcinstDo
	As(alias string) gormgen.Dao
	Session(config *gorm.Session) IActHiProcinstDo
	Columns(cols ...field.Expr) gormgen.Columns
	Clauses(conds ...clause.Expression) IActHiProcinstDo
	Not(conds ...gormgen.Condition) IActHiProcinstDo
	Or(conds ...gormgen.Condition) IActHiProcinstDo
	Select(conds ...field.Expr) IActHiProcinstDo
	Where(conds ...gormgen.Condition) IActHiProcinstDo
	Order(conds ...field.Expr) IActHiProcinstDo
	Distinct(cols ...field.Expr) IActHiProcinstDo
	Omit(cols ...field.Expr) IActHiProcinstDo
	Join(table schema.Tabler, on ...field.Expr) IActHiProcinstDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActHiProcinstDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActHiProcinstDo
	Group(cols ...field.Expr) IActHiProcinstDo
	Having(conds ...gormgen.Condition) IActHiProcinstDo
	Limit(limit int) IActHiProcinstDo
	Offset(offset int) IActHiProcinstDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) IActHiProcinstDo
	Unscoped() IActHiProcinstDo
	Create(values ...*model.ActHiProcinst) error
	CreateInBatches(values []*model.ActHiProcinst, batchSize int) error
	Save(values ...*model.ActHiProcinst) error
	First() (*model.ActHiProcinst, error)
	Take() (*model.ActHiProcinst, error)
	Last() (*model.ActHiProcinst, error)
	Find() ([]*model.ActHiProcinst, error)
	FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.ActHiProcinst, err error)
	FindInBatches(result *[]*model.ActHiProcinst, batchSize int, fc func(tx gormgen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ActHiProcinst) (info gormgen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	Updates(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateFrom(q gormgen.SubQuery) gormgen.Dao
	Attrs(attrs ...field.AssignExpr) IActHiProcinstDo
	Assign(attrs ...field.AssignExpr) IActHiProcinstDo
	Joins(fields ...field.RelationField) IActHiProcinstDo
	Preload(fields ...field.RelationField) IActHiProcinstDo
	FirstOrInit() (*model.ActHiProcinst, error)
	FirstOrCreate() (*model.ActHiProcinst, error)
	FindByPage(offset int, limit int) (result []*model.ActHiProcinst, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Fetch(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActHiProcinstDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a actHiProcinstDo) Debug() IActHiProcinstDo {
	return a.withDO(a.DO.Debug())
}

func (a actHiProcinstDo) WithContext(ctx context.Context) IActHiProcinstDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a actHiProcinstDo) ReadDB() IActHiProcinstDo {
	return a.Clauses(dbresolver.Read)
}

func (a actHiProcinstDo) WriteDB() IActHiProcinstDo {
	return a.Clauses(dbresolver.Write)
}

func (a actHiProcinstDo) Session(config *gorm.Session) IActHiProcinstDo {
	return a.withDO(a.DO.Session(config))
}

func (a actHiProcinstDo) Clauses(conds ...clause.Expression) IActHiProcinstDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a actHiProcinstDo) Returning(value interface{}, columns ...string) IActHiProcinstDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a actHiProcinstDo) Not(conds ...gormgen.Condition) IActHiProcinstDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a actHiProcinstDo) Or(conds ...gormgen.Condition) IActHiProcinstDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a actHiProcinstDo) Select(conds ...field.Expr) IActHiProcinstDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a actHiProcinstDo) Where(conds ...gormgen.Condition) IActHiProcinstDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a actHiProcinstDo) Order(conds ...field.Expr) IActHiProcinstDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a actHiProcinstDo) Distinct(cols ...field.Expr) IActHiProcinstDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a actHiProcinstDo) Omit(cols ...field.Expr) IActHiProcinstDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a actHiProcinstDo) Join(table schema.Tabler, on ...field.Expr) IActHiProcinstDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a actHiProcinstDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActHiProcinstDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a actHiProcinstDo) RightJoin(table schema.Tabler, on ...field.Expr) IActHiProcinstDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a actHiProcinstDo) Group(cols ...field.Expr) IActHiProcinstDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a actHiProcinstDo) Having(conds ...gormgen.Condition) IActHiProcinstDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a actHiProcinstDo) Limit(limit int) IActHiProcinstDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a actHiProcinstDo) Offset(offset int) IActHiProcinstDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a actHiProcinstDo) Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) IActHiProcinstDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a actHiProcinstDo) Unscoped() IActHiProcinstDo {
	return a.withDO(a.DO.Unscoped())
}

func (a actHiProcinstDo) Create(values ...*model.ActHiProcinst) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a actHiProcinstDo) CreateInBatches(values []*model.ActHiProcinst, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a actHiProcinstDo) Save(values ...*model.ActHiProcinst) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a actHiProcinstDo) First() (*model.ActHiProcinst, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActHiProcinst), nil
	}
}

func (a actHiProcinstDo) Take() (*model.ActHiProcinst, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActHiProcinst), nil
	}
}

func (a actHiProcinstDo) Last() (*model.ActHiProcinst, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActHiProcinst), nil
	}
}

func (a actHiProcinstDo) Find() ([]*model.ActHiProcinst, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActHiProcinst), err
}

func (a actHiProcinstDo) FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.ActHiProcinst, err error) {
	buf := make([]*model.ActHiProcinst, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gormgen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a actHiProcinstDo) FindInBatches(result *[]*model.ActHiProcinst, batchSize int, fc func(tx gormgen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a actHiProcinstDo) Attrs(attrs ...field.AssignExpr) IActHiProcinstDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a actHiProcinstDo) Assign(attrs ...field.AssignExpr) IActHiProcinstDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a actHiProcinstDo) Joins(fields ...field.RelationField) IActHiProcinstDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a actHiProcinstDo) Preload(fields ...field.RelationField) IActHiProcinstDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a actHiProcinstDo) FirstOrInit() (*model.ActHiProcinst, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActHiProcinst), nil
	}
}

func (a actHiProcinstDo) FirstOrCreate() (*model.ActHiProcinst, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActHiProcinst), nil
	}
}

func (a actHiProcinstDo) FindByPage(offset int, limit int) (result []*model.ActHiProcinst, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a actHiProcinstDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a actHiProcinstDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a actHiProcinstDo) Fetch(result interface{}) (err error) {
	return a.DO.Fetch(result)
}

func (a actHiProcinstDo) Delete(models ...*model.ActHiProcinst) (result gormgen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *actHiProcinstDo) withDO(do gormgen.Dao) *actHiProcinstDo {
	a.DO = *do.(*gormgen.DO)
	return a
}

// Code generated by github.com/wubin1989/gen. DO NOT EDIT.
// Code generated by github.com/wubin1989/gen. DO NOT EDIT.
// Code generated by github.com/wubin1989/gen. DO NOT EDIT.

package query

import (
	"context"

	gormgen "github.com/wubin1989/gen"
	"github.com/wubin1989/gorm"
	"github.com/wubin1989/gorm/clause"
	"github.com/wubin1989/gorm/schema"

	"github.com/wubin1989/gen/field"

	"github.com/wubin1989/dbresolver"

	"github.com/go-cinderella/cinderella-engine/engine/model"
)

func newActGeBytearray(db *gorm.DB, opts ...gormgen.DOOption) actGeBytearray {
	_actGeBytearray := actGeBytearray{}

	_actGeBytearray.actGeBytearrayDo.UseDB(db, opts...)
	_actGeBytearray.actGeBytearrayDo.UseModel(&model.ActGeBytearray{})

	tableName := _actGeBytearray.actGeBytearrayDo.TableName()
	_actGeBytearray.ALL = field.NewAsterisk(tableName)
	_actGeBytearray.ID = field.NewString(tableName, "id_")
	_actGeBytearray.Rev = field.NewInt32(tableName, "rev_")
	_actGeBytearray.Name = field.NewString(tableName, "name_")
	_actGeBytearray.DeploymentID = field.NewString(tableName, "deployment_id_")
	_actGeBytearray.Bytes = field.NewBytes(tableName, "bytes_")
	_actGeBytearray.Generated = field.NewBool(tableName, "generated_")

	_actGeBytearray.fillFieldMap()

	return _actGeBytearray
}

type actGeBytearray struct {
	actGeBytearrayDo

	ALL          field.Asterisk
	ID           field.String
	Rev          field.Int32
	Name         field.String
	DeploymentID field.String
	Bytes        field.Bytes
	Generated    field.Bool

	fieldMap map[string]field.Expr
}

func (a actGeBytearray) Table(newTableName string) *actGeBytearray {
	a.actGeBytearrayDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a actGeBytearray) As(alias string) *actGeBytearray {
	a.actGeBytearrayDo.DO = *(a.actGeBytearrayDo.As(alias).(*gormgen.DO))
	return a.updateTableName(alias)
}

func (a *actGeBytearray) updateTableName(table string) *actGeBytearray {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "id_")
	a.Rev = field.NewInt32(table, "rev_")
	a.Name = field.NewString(table, "name_")
	a.DeploymentID = field.NewString(table, "deployment_id_")
	a.Bytes = field.NewBytes(table, "bytes_")
	a.Generated = field.NewBool(table, "generated_")

	a.fillFieldMap()

	return a
}

func (a *actGeBytearray) WithContext(ctx context.Context) IActGeBytearrayDo {
	return a.actGeBytearrayDo.WithContext(ctx)
}

func (a actGeBytearray) TableName() string { return a.actGeBytearrayDo.TableName() }

func (a actGeBytearray) Alias() string { return a.actGeBytearrayDo.Alias() }

func (a actGeBytearray) Columns(cols ...field.Expr) gormgen.Columns {
	return a.actGeBytearrayDo.Columns(cols...)
}

func (a *actGeBytearray) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *actGeBytearray) GetFieldExprByName(fieldName string) (field.Expr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	return _f, ok
}

func (a *actGeBytearray) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 6)
	a.fieldMap["id_"] = a.ID
	a.fieldMap["rev_"] = a.Rev
	a.fieldMap["name_"] = a.Name
	a.fieldMap["deployment_id_"] = a.DeploymentID
	a.fieldMap["bytes_"] = a.Bytes
	a.fieldMap["generated_"] = a.Generated
}

func (a actGeBytearray) Clone(db *gorm.DB) actGeBytearray {
	a.actGeBytearrayDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a actGeBytearray) ReplaceDB(db *gorm.DB) actGeBytearray {
	a.actGeBytearrayDo.ReplaceDB(db)
	return a
}

type actGeBytearrayDo struct{ gormgen.DO }

type IActGeBytearrayDo interface {
	gormgen.SubQuery
	Debug() IActGeBytearrayDo
	WithContext(ctx context.Context) IActGeBytearrayDo
	WithResult(fc func(tx gormgen.Dao)) gormgen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActGeBytearrayDo
	WriteDB() IActGeBytearrayDo
	As(alias string) gormgen.Dao
	Session(config *gorm.Session) IActGeBytearrayDo
	Columns(cols ...field.Expr) gormgen.Columns
	Clauses(conds ...clause.Expression) IActGeBytearrayDo
	Not(conds ...gormgen.Condition) IActGeBytearrayDo
	Or(conds ...gormgen.Condition) IActGeBytearrayDo
	Select(conds ...field.Expr) IActGeBytearrayDo
	Where(conds ...gormgen.Condition) IActGeBytearrayDo
	Order(conds ...field.Expr) IActGeBytearrayDo
	Distinct(cols ...field.Expr) IActGeBytearrayDo
	Omit(cols ...field.Expr) IActGeBytearrayDo
	Join(table schema.Tabler, on ...field.Expr) IActGeBytearrayDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActGeBytearrayDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActGeBytearrayDo
	Group(cols ...field.Expr) IActGeBytearrayDo
	Having(conds ...gormgen.Condition) IActGeBytearrayDo
	Limit(limit int) IActGeBytearrayDo
	Offset(offset int) IActGeBytearrayDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) IActGeBytearrayDo
	Unscoped() IActGeBytearrayDo
	Create(values ...*model.ActGeBytearray) error
	CreateInBatches(values []*model.ActGeBytearray, batchSize int) error
	Save(values ...*model.ActGeBytearray) error
	First() (*model.ActGeBytearray, error)
	Take() (*model.ActGeBytearray, error)
	Last() (*model.ActGeBytearray, error)
	Find() ([]*model.ActGeBytearray, error)
	FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.ActGeBytearray, err error)
	FindInBatches(result *[]*model.ActGeBytearray, batchSize int, fc func(tx gormgen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ActGeBytearray) (info gormgen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	Updates(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateFrom(q gormgen.SubQuery) gormgen.Dao
	Attrs(attrs ...field.AssignExpr) IActGeBytearrayDo
	Assign(attrs ...field.AssignExpr) IActGeBytearrayDo
	Joins(fields ...field.RelationField) IActGeBytearrayDo
	Preload(fields ...field.RelationField) IActGeBytearrayDo
	FirstOrInit() (*model.ActGeBytearray, error)
	FirstOrCreate() (*model.ActGeBytearray, error)
	FindByPage(offset int, limit int) (result []*model.ActGeBytearray, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Fetch(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActGeBytearrayDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a actGeBytearrayDo) Debug() IActGeBytearrayDo {
	return a.withDO(a.DO.Debug())
}

func (a actGeBytearrayDo) WithContext(ctx context.Context) IActGeBytearrayDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a actGeBytearrayDo) ReadDB() IActGeBytearrayDo {
	return a.Clauses(dbresolver.Read)
}

func (a actGeBytearrayDo) WriteDB() IActGeBytearrayDo {
	return a.Clauses(dbresolver.Write)
}

func (a actGeBytearrayDo) Session(config *gorm.Session) IActGeBytearrayDo {
	return a.withDO(a.DO.Session(config))
}

func (a actGeBytearrayDo) Clauses(conds ...clause.Expression) IActGeBytearrayDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a actGeBytearrayDo) Returning(value interface{}, columns ...string) IActGeBytearrayDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a actGeBytearrayDo) Not(conds ...gormgen.Condition) IActGeBytearrayDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a actGeBytearrayDo) Or(conds ...gormgen.Condition) IActGeBytearrayDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a actGeBytearrayDo) Select(conds ...field.Expr) IActGeBytearrayDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a actGeBytearrayDo) Where(conds ...gormgen.Condition) IActGeBytearrayDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a actGeBytearrayDo) Order(conds ...field.Expr) IActGeBytearrayDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a actGeBytearrayDo) Distinct(cols ...field.Expr) IActGeBytearrayDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a actGeBytearrayDo) Omit(cols ...field.Expr) IActGeBytearrayDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a actGeBytearrayDo) Join(table schema.Tabler, on ...field.Expr) IActGeBytearrayDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a actGeBytearrayDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActGeBytearrayDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a actGeBytearrayDo) RightJoin(table schema.Tabler, on ...field.Expr) IActGeBytearrayDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a actGeBytearrayDo) Group(cols ...field.Expr) IActGeBytearrayDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a actGeBytearrayDo) Having(conds ...gormgen.Condition) IActGeBytearrayDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a actGeBytearrayDo) Limit(limit int) IActGeBytearrayDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a actGeBytearrayDo) Offset(offset int) IActGeBytearrayDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a actGeBytearrayDo) Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) IActGeBytearrayDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a actGeBytearrayDo) Unscoped() IActGeBytearrayDo {
	return a.withDO(a.DO.Unscoped())
}

func (a actGeBytearrayDo) Create(values ...*model.ActGeBytearray) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a actGeBytearrayDo) CreateInBatches(values []*model.ActGeBytearray, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a actGeBytearrayDo) Save(values ...*model.ActGeBytearray) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a actGeBytearrayDo) First() (*model.ActGeBytearray, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActGeBytearray), nil
	}
}

func (a actGeBytearrayDo) Take() (*model.ActGeBytearray, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActGeBytearray), nil
	}
}

func (a actGeBytearrayDo) Last() (*model.ActGeBytearray, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActGeBytearray), nil
	}
}

func (a actGeBytearrayDo) Find() ([]*model.ActGeBytearray, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActGeBytearray), err
}

func (a actGeBytearrayDo) FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.ActGeBytearray, err error) {
	buf := make([]*model.ActGeBytearray, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gormgen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a actGeBytearrayDo) FindInBatches(result *[]*model.ActGeBytearray, batchSize int, fc func(tx gormgen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a actGeBytearrayDo) Attrs(attrs ...field.AssignExpr) IActGeBytearrayDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a actGeBytearrayDo) Assign(attrs ...field.AssignExpr) IActGeBytearrayDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a actGeBytearrayDo) Joins(fields ...field.RelationField) IActGeBytearrayDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a actGeBytearrayDo) Preload(fields ...field.RelationField) IActGeBytearrayDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a actGeBytearrayDo) FirstOrInit() (*model.ActGeBytearray, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActGeBytearray), nil
	}
}

func (a actGeBytearrayDo) FirstOrCreate() (*model.ActGeBytearray, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActGeBytearray), nil
	}
}

func (a actGeBytearrayDo) FindByPage(offset int, limit int) (result []*model.ActGeBytearray, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a actGeBytearrayDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a actGeBytearrayDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a actGeBytearrayDo) Fetch(result interface{}) (err error) {
	return a.DO.Fetch(result)
}

func (a actGeBytearrayDo) Delete(models ...*model.ActGeBytearray) (result gormgen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *actGeBytearrayDo) withDO(do gormgen.Dao) *actGeBytearrayDo {
	a.DO = *do.(*gormgen.DO)
	return a
}

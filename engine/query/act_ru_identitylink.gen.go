// Code generated by github.com/wubin1989/gen. DO NOT EDIT.
// Code generated by github.com/wubin1989/gen. DO NOT EDIT.
// Code generated by github.com/wubin1989/gen. DO NOT EDIT.

package query

import (
	"context"

	gormgen "github.com/wubin1989/gen"
	"github.com/wubin1989/gorm"
	"github.com/wubin1989/gorm/clause"
	"github.com/wubin1989/gorm/schema"

	"github.com/wubin1989/gen/field"

	"github.com/wubin1989/dbresolver"

	"github.com/go-cinderella/cinderella-engine/engine/model"
)

func newActRuIdentitylink(db *gorm.DB, opts ...gormgen.DOOption) actRuIdentitylink {
	_actRuIdentitylink := actRuIdentitylink{}

	_actRuIdentitylink.actRuIdentitylinkDo.UseDB(db, opts...)
	_actRuIdentitylink.actRuIdentitylinkDo.UseModel(&model.ActRuIdentitylink{})

	tableName := _actRuIdentitylink.actRuIdentitylinkDo.TableName()
	_actRuIdentitylink.ALL = field.NewAsterisk(tableName)
	_actRuIdentitylink.ID = field.NewString(tableName, "id_")
	_actRuIdentitylink.Rev = field.NewInt32(tableName, "rev_")
	_actRuIdentitylink.GroupID = field.NewString(tableName, "group_id_")
	_actRuIdentitylink.Type = field.NewString(tableName, "type_")
	_actRuIdentitylink.UserID = field.NewString(tableName, "user_id_")
	_actRuIdentitylink.TaskID = field.NewString(tableName, "task_id_")
	_actRuIdentitylink.ProcInstID = field.NewString(tableName, "proc_inst_id_")
	_actRuIdentitylink.ProcDefID = field.NewString(tableName, "proc_def_id_")
	_actRuIdentitylink.ScopeID = field.NewString(tableName, "scope_id_")
	_actRuIdentitylink.SubScopeID = field.NewString(tableName, "sub_scope_id_")
	_actRuIdentitylink.ScopeType = field.NewString(tableName, "scope_type_")
	_actRuIdentitylink.ScopeDefinitionID = field.NewString(tableName, "scope_definition_id_")

	_actRuIdentitylink.fillFieldMap()

	return _actRuIdentitylink
}

type actRuIdentitylink struct {
	 actRuIdentitylinkDo

	ALL               field.Asterisk
	ID                field.String
	Rev               field.Int32
	GroupID           field.String
	Type              field.String
	UserID            field.String
	TaskID            field.String
	ProcInstID        field.String
	ProcDefID         field.String
	ScopeID           field.String
	SubScopeID        field.String
	ScopeType         field.String
	ScopeDefinitionID field.String

	fieldMap map[string]field.Expr
}

func (a actRuIdentitylink) Table(newTableName string) *actRuIdentitylink {
	a.actRuIdentitylinkDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a actRuIdentitylink) As(alias string) *actRuIdentitylink {
	a.actRuIdentitylinkDo.DO = *(a.actRuIdentitylinkDo.As(alias).(*gormgen.DO))
	return a.updateTableName(alias)
}

func (a *actRuIdentitylink) updateTableName(table string) *actRuIdentitylink {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "id_")
	a.Rev = field.NewInt32(table, "rev_")
	a.GroupID = field.NewString(table, "group_id_")
	a.Type = field.NewString(table, "type_")
	a.UserID = field.NewString(table, "user_id_")
	a.TaskID = field.NewString(table, "task_id_")
	a.ProcInstID = field.NewString(table, "proc_inst_id_")
	a.ProcDefID = field.NewString(table, "proc_def_id_")
	a.ScopeID = field.NewString(table, "scope_id_")
	a.SubScopeID = field.NewString(table, "sub_scope_id_")
	a.ScopeType = field.NewString(table, "scope_type_")
	a.ScopeDefinitionID = field.NewString(table, "scope_definition_id_")

	a.fillFieldMap()

	return a
}

func (a *actRuIdentitylink) WithContext(ctx context.Context) IActRuIdentitylinkDo {
	return a.actRuIdentitylinkDo.WithContext(ctx)
}

func (a actRuIdentitylink) TableName() string { return a.actRuIdentitylinkDo.TableName() }

func (a actRuIdentitylink) Alias() string { return a.actRuIdentitylinkDo.Alias() }

func (a actRuIdentitylink) Columns(cols ...field.Expr) gormgen.Columns {
	return a.actRuIdentitylinkDo.Columns(cols...)
}

func (a *actRuIdentitylink) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *actRuIdentitylink) GetFieldExprByName(fieldName string) (field.Expr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	return _f, ok
}

func (a *actRuIdentitylink) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 12)
	a.fieldMap["id_"] = a.ID
	a.fieldMap["rev_"] = a.Rev
	a.fieldMap["group_id_"] = a.GroupID
	a.fieldMap["type_"] = a.Type
	a.fieldMap["user_id_"] = a.UserID
	a.fieldMap["task_id_"] = a.TaskID
	a.fieldMap["proc_inst_id_"] = a.ProcInstID
	a.fieldMap["proc_def_id_"] = a.ProcDefID
	a.fieldMap["scope_id_"] = a.ScopeID
	a.fieldMap["sub_scope_id_"] = a.SubScopeID
	a.fieldMap["scope_type_"] = a.ScopeType
	a.fieldMap["scope_definition_id_"] = a.ScopeDefinitionID
}

func (a actRuIdentitylink) Clone(db *gorm.DB) actRuIdentitylink {
	a.actRuIdentitylinkDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a actRuIdentitylink) ReplaceDB(db *gorm.DB) actRuIdentitylink {
	a.actRuIdentitylinkDo.ReplaceDB(db)
	return a
}

type actRuIdentitylinkDo struct{ gormgen.DO }

type IActRuIdentitylinkDo interface {
	gormgen.SubQuery
	Debug() IActRuIdentitylinkDo
	WithContext(ctx context.Context) IActRuIdentitylinkDo
	WithResult(fc func(tx gormgen.Dao)) gormgen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActRuIdentitylinkDo
	WriteDB() IActRuIdentitylinkDo
	As(alias string) gormgen.Dao
	Session(config *gorm.Session) IActRuIdentitylinkDo
	Columns(cols ...field.Expr) gormgen.Columns
	Clauses(conds ...clause.Expression) IActRuIdentitylinkDo
	Not(conds ...gormgen.Condition) IActRuIdentitylinkDo
	Or(conds ...gormgen.Condition) IActRuIdentitylinkDo
	Select(conds ...field.Expr) IActRuIdentitylinkDo
	Where(conds ...gormgen.Condition) IActRuIdentitylinkDo
	Order(conds ...field.Expr) IActRuIdentitylinkDo
	Distinct(cols ...field.Expr) IActRuIdentitylinkDo
	Omit(cols ...field.Expr) IActRuIdentitylinkDo
	Join(table schema.Tabler, on ...field.Expr) IActRuIdentitylinkDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActRuIdentitylinkDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActRuIdentitylinkDo
	Group(cols ...field.Expr) IActRuIdentitylinkDo
	Having(conds ...gormgen.Condition) IActRuIdentitylinkDo
	Limit(limit int) IActRuIdentitylinkDo
	Offset(offset int) IActRuIdentitylinkDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) IActRuIdentitylinkDo
	Unscoped() IActRuIdentitylinkDo
	Create(values ...*model.ActRuIdentitylink) error
	CreateInBatches(values []*model.ActRuIdentitylink, batchSize int) error
	Save(values ...*model.ActRuIdentitylink) error
	First() (*model.ActRuIdentitylink, error)
	Take() (*model.ActRuIdentitylink, error)
	Last() (*model.ActRuIdentitylink, error)
	Find() ([]*model.ActRuIdentitylink, error)
	FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.ActRuIdentitylink, err error)
	FindInBatches(result *[]*model.ActRuIdentitylink, batchSize int, fc func(tx gormgen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ActRuIdentitylink) (info gormgen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	Updates(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateFrom(q gormgen.SubQuery) gormgen.Dao
	Attrs(attrs ...field.AssignExpr) IActRuIdentitylinkDo
	Assign(attrs ...field.AssignExpr) IActRuIdentitylinkDo
	Joins(fields ...field.RelationField) IActRuIdentitylinkDo
	Preload(fields ...field.RelationField) IActRuIdentitylinkDo
	FirstOrInit() (*model.ActRuIdentitylink, error)
	FirstOrCreate() (*model.ActRuIdentitylink, error)
	FindByPage(offset int, limit int) (result []*model.ActRuIdentitylink, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Fetch(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActRuIdentitylinkDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a actRuIdentitylinkDo) Debug() IActRuIdentitylinkDo {
	return a.withDO(a.DO.Debug())
}

func (a actRuIdentitylinkDo) WithContext(ctx context.Context) IActRuIdentitylinkDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a actRuIdentitylinkDo) ReadDB() IActRuIdentitylinkDo {
	return a.Clauses(dbresolver.Read)
}

func (a actRuIdentitylinkDo) WriteDB() IActRuIdentitylinkDo {
	return a.Clauses(dbresolver.Write)
}

func (a actRuIdentitylinkDo) Session(config *gorm.Session) IActRuIdentitylinkDo {
	return a.withDO(a.DO.Session(config))
}

func (a actRuIdentitylinkDo) Clauses(conds ...clause.Expression) IActRuIdentitylinkDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a actRuIdentitylinkDo) Returning(value interface{}, columns ...string) IActRuIdentitylinkDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a actRuIdentitylinkDo) Not(conds ...gormgen.Condition) IActRuIdentitylinkDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a actRuIdentitylinkDo) Or(conds ...gormgen.Condition) IActRuIdentitylinkDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a actRuIdentitylinkDo) Select(conds ...field.Expr) IActRuIdentitylinkDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a actRuIdentitylinkDo) Where(conds ...gormgen.Condition) IActRuIdentitylinkDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a actRuIdentitylinkDo) Order(conds ...field.Expr) IActRuIdentitylinkDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a actRuIdentitylinkDo) Distinct(cols ...field.Expr) IActRuIdentitylinkDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a actRuIdentitylinkDo) Omit(cols ...field.Expr) IActRuIdentitylinkDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a actRuIdentitylinkDo) Join(table schema.Tabler, on ...field.Expr) IActRuIdentitylinkDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a actRuIdentitylinkDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActRuIdentitylinkDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a actRuIdentitylinkDo) RightJoin(table schema.Tabler, on ...field.Expr) IActRuIdentitylinkDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a actRuIdentitylinkDo) Group(cols ...field.Expr) IActRuIdentitylinkDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a actRuIdentitylinkDo) Having(conds ...gormgen.Condition) IActRuIdentitylinkDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a actRuIdentitylinkDo) Limit(limit int) IActRuIdentitylinkDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a actRuIdentitylinkDo) Offset(offset int) IActRuIdentitylinkDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a actRuIdentitylinkDo) Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) IActRuIdentitylinkDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a actRuIdentitylinkDo) Unscoped() IActRuIdentitylinkDo {
	return a.withDO(a.DO.Unscoped())
}

func (a actRuIdentitylinkDo) Create(values ...*model.ActRuIdentitylink) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a actRuIdentitylinkDo) CreateInBatches(values []*model.ActRuIdentitylink, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a actRuIdentitylinkDo) Save(values ...*model.ActRuIdentitylink) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a actRuIdentitylinkDo) First() (*model.ActRuIdentitylink, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActRuIdentitylink), nil
	}
}

func (a actRuIdentitylinkDo) Take() (*model.ActRuIdentitylink, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActRuIdentitylink), nil
	}
}

func (a actRuIdentitylinkDo) Last() (*model.ActRuIdentitylink, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActRuIdentitylink), nil
	}
}

func (a actRuIdentitylinkDo) Find() ([]*model.ActRuIdentitylink, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActRuIdentitylink), err
}

func (a actRuIdentitylinkDo) FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.ActRuIdentitylink, err error) {
	buf := make([]*model.ActRuIdentitylink, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gormgen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a actRuIdentitylinkDo) FindInBatches(result *[]*model.ActRuIdentitylink, batchSize int, fc func(tx gormgen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a actRuIdentitylinkDo) Attrs(attrs ...field.AssignExpr) IActRuIdentitylinkDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a actRuIdentitylinkDo) Assign(attrs ...field.AssignExpr) IActRuIdentitylinkDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a actRuIdentitylinkDo) Joins(fields ...field.RelationField) IActRuIdentitylinkDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a actRuIdentitylinkDo) Preload(fields ...field.RelationField) IActRuIdentitylinkDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a actRuIdentitylinkDo) FirstOrInit() (*model.ActRuIdentitylink, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActRuIdentitylink), nil
	}
}

func (a actRuIdentitylinkDo) FirstOrCreate() (*model.ActRuIdentitylink, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActRuIdentitylink), nil
	}
}

func (a actRuIdentitylinkDo) FindByPage(offset int, limit int) (result []*model.ActRuIdentitylink, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a actRuIdentitylinkDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a actRuIdentitylinkDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a actRuIdentitylinkDo) Fetch(result interface{}) (err error) {
	return a.DO.Fetch(result)
}

func (a actRuIdentitylinkDo) Delete(models ...*model.ActRuIdentitylink) (result gormgen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *actRuIdentitylinkDo) withDO(do gormgen.Dao) *actRuIdentitylinkDo {
	a.DO = *do.(*gormgen.DO)
	return a
}

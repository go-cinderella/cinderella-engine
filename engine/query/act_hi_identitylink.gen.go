// Code generated by github.com/wubin1989/gen. DO NOT EDIT.
// Code generated by github.com/wubin1989/gen. DO NOT EDIT.
// Code generated by github.com/wubin1989/gen. DO NOT EDIT.

package query

import (
	"context"

	gormgen "github.com/wubin1989/gen"
	"github.com/wubin1989/gorm"
	"github.com/wubin1989/gorm/clause"
	"github.com/wubin1989/gorm/schema"

	"github.com/wubin1989/gen/field"

	"github.com/wubin1989/dbresolver"

	"github.com/go-cinderella/cinderella-engine/engine/internal/model"
)

func newActHiIdentitylink(db *gorm.DB, opts ...gormgen.DOOption) actHiIdentitylink {
	_actHiIdentitylink := actHiIdentitylink{}

	_actHiIdentitylink.actHiIdentitylinkDo.UseDB(db, opts...)
	_actHiIdentitylink.actHiIdentitylinkDo.UseModel(&model.ActHiIdentitylink{})

	tableName := _actHiIdentitylink.actHiIdentitylinkDo.TableName()
	_actHiIdentitylink.ALL = field.NewAsterisk(tableName)
	_actHiIdentitylink.ID = field.NewString(tableName, "id_")
	_actHiIdentitylink.GroupID = field.NewString(tableName, "group_id_")
	_actHiIdentitylink.Type = field.NewString(tableName, "type_")
	_actHiIdentitylink.UserID = field.NewString(tableName, "user_id_")
	_actHiIdentitylink.TaskID = field.NewString(tableName, "task_id_")
	_actHiIdentitylink.CreateTime = field.NewTime(tableName, "create_time_")
	_actHiIdentitylink.ProcInstID = field.NewString(tableName, "proc_inst_id_")
	_actHiIdentitylink.ScopeID = field.NewString(tableName, "scope_id_")
	_actHiIdentitylink.SubScopeID = field.NewString(tableName, "sub_scope_id_")
	_actHiIdentitylink.ScopeType = field.NewString(tableName, "scope_type_")
	_actHiIdentitylink.ScopeDefinitionID = field.NewString(tableName, "scope_definition_id_")

	_actHiIdentitylink.fillFieldMap()

	return _actHiIdentitylink
}

type actHiIdentitylink struct {
	actHiIdentitylinkDo

	ALL               field.Asterisk
	ID                field.String
	GroupID           field.String
	Type              field.String
	UserID            field.String
	TaskID            field.String
	CreateTime        field.Time
	ProcInstID        field.String
	ScopeID           field.String
	SubScopeID        field.String
	ScopeType         field.String
	ScopeDefinitionID field.String

	fieldMap map[string]field.Expr
}

func (a actHiIdentitylink) Table(newTableName string) *actHiIdentitylink {
	a.actHiIdentitylinkDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a actHiIdentitylink) As(alias string) *actHiIdentitylink {
	a.actHiIdentitylinkDo.DO = *(a.actHiIdentitylinkDo.As(alias).(*gormgen.DO))
	return a.updateTableName(alias)
}

func (a *actHiIdentitylink) updateTableName(table string) *actHiIdentitylink {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "id_")
	a.GroupID = field.NewString(table, "group_id_")
	a.Type = field.NewString(table, "type_")
	a.UserID = field.NewString(table, "user_id_")
	a.TaskID = field.NewString(table, "task_id_")
	a.CreateTime = field.NewTime(table, "create_time_")
	a.ProcInstID = field.NewString(table, "proc_inst_id_")
	a.ScopeID = field.NewString(table, "scope_id_")
	a.SubScopeID = field.NewString(table, "sub_scope_id_")
	a.ScopeType = field.NewString(table, "scope_type_")
	a.ScopeDefinitionID = field.NewString(table, "scope_definition_id_")

	a.fillFieldMap()

	return a
}

func (a *actHiIdentitylink) WithContext(ctx context.Context) IActHiIdentitylinkDo {
	return a.actHiIdentitylinkDo.WithContext(ctx)
}

func (a actHiIdentitylink) TableName() string { return a.actHiIdentitylinkDo.TableName() }

func (a actHiIdentitylink) Alias() string { return a.actHiIdentitylinkDo.Alias() }

func (a actHiIdentitylink) Columns(cols ...field.Expr) gormgen.Columns {
	return a.actHiIdentitylinkDo.Columns(cols...)
}

func (a *actHiIdentitylink) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *actHiIdentitylink) GetFieldExprByName(fieldName string) (field.Expr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	return _f, ok
}

func (a *actHiIdentitylink) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 11)
	a.fieldMap["id_"] = a.ID
	a.fieldMap["group_id_"] = a.GroupID
	a.fieldMap["type_"] = a.Type
	a.fieldMap["user_id_"] = a.UserID
	a.fieldMap["task_id_"] = a.TaskID
	a.fieldMap["create_time_"] = a.CreateTime
	a.fieldMap["proc_inst_id_"] = a.ProcInstID
	a.fieldMap["scope_id_"] = a.ScopeID
	a.fieldMap["sub_scope_id_"] = a.SubScopeID
	a.fieldMap["scope_type_"] = a.ScopeType
	a.fieldMap["scope_definition_id_"] = a.ScopeDefinitionID
}

func (a actHiIdentitylink) Clone(db *gorm.DB) actHiIdentitylink {
	a.actHiIdentitylinkDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a actHiIdentitylink) ReplaceDB(db *gorm.DB) actHiIdentitylink {
	a.actHiIdentitylinkDo.ReplaceDB(db)
	return a
}

type actHiIdentitylinkDo struct{ gormgen.DO }

type IActHiIdentitylinkDo interface {
	gormgen.SubQuery
	Debug() IActHiIdentitylinkDo
	WithContext(ctx context.Context) IActHiIdentitylinkDo
	WithResult(fc func(tx gormgen.Dao)) gormgen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActHiIdentitylinkDo
	WriteDB() IActHiIdentitylinkDo
	As(alias string) gormgen.Dao
	Session(config *gorm.Session) IActHiIdentitylinkDo
	Columns(cols ...field.Expr) gormgen.Columns
	Clauses(conds ...clause.Expression) IActHiIdentitylinkDo
	Not(conds ...gormgen.Condition) IActHiIdentitylinkDo
	Or(conds ...gormgen.Condition) IActHiIdentitylinkDo
	Select(conds ...field.Expr) IActHiIdentitylinkDo
	Where(conds ...gormgen.Condition) IActHiIdentitylinkDo
	Order(conds ...field.Expr) IActHiIdentitylinkDo
	Distinct(cols ...field.Expr) IActHiIdentitylinkDo
	Omit(cols ...field.Expr) IActHiIdentitylinkDo
	Join(table schema.Tabler, on ...field.Expr) IActHiIdentitylinkDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActHiIdentitylinkDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActHiIdentitylinkDo
	Group(cols ...field.Expr) IActHiIdentitylinkDo
	Having(conds ...gormgen.Condition) IActHiIdentitylinkDo
	Limit(limit int) IActHiIdentitylinkDo
	Offset(offset int) IActHiIdentitylinkDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) IActHiIdentitylinkDo
	Unscoped() IActHiIdentitylinkDo
	Create(values ...*model.ActHiIdentitylink) error
	CreateInBatches(values []*model.ActHiIdentitylink, batchSize int) error
	Save(values ...*model.ActHiIdentitylink) error
	First() (*model.ActHiIdentitylink, error)
	Take() (*model.ActHiIdentitylink, error)
	Last() (*model.ActHiIdentitylink, error)
	Find() ([]*model.ActHiIdentitylink, error)
	FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.ActHiIdentitylink, err error)
	FindInBatches(result *[]*model.ActHiIdentitylink, batchSize int, fc func(tx gormgen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ActHiIdentitylink) (info gormgen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	Updates(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateFrom(q gormgen.SubQuery) gormgen.Dao
	Attrs(attrs ...field.AssignExpr) IActHiIdentitylinkDo
	Assign(attrs ...field.AssignExpr) IActHiIdentitylinkDo
	Joins(fields ...field.RelationField) IActHiIdentitylinkDo
	Preload(fields ...field.RelationField) IActHiIdentitylinkDo
	FirstOrInit() (*model.ActHiIdentitylink, error)
	FirstOrCreate() (*model.ActHiIdentitylink, error)
	FindByPage(offset int, limit int) (result []*model.ActHiIdentitylink, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Fetch(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActHiIdentitylinkDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a actHiIdentitylinkDo) Debug() IActHiIdentitylinkDo {
	return a.withDO(a.DO.Debug())
}

func (a actHiIdentitylinkDo) WithContext(ctx context.Context) IActHiIdentitylinkDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a actHiIdentitylinkDo) ReadDB() IActHiIdentitylinkDo {
	return a.Clauses(dbresolver.Read)
}

func (a actHiIdentitylinkDo) WriteDB() IActHiIdentitylinkDo {
	return a.Clauses(dbresolver.Write)
}

func (a actHiIdentitylinkDo) Session(config *gorm.Session) IActHiIdentitylinkDo {
	return a.withDO(a.DO.Session(config))
}

func (a actHiIdentitylinkDo) Clauses(conds ...clause.Expression) IActHiIdentitylinkDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a actHiIdentitylinkDo) Returning(value interface{}, columns ...string) IActHiIdentitylinkDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a actHiIdentitylinkDo) Not(conds ...gormgen.Condition) IActHiIdentitylinkDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a actHiIdentitylinkDo) Or(conds ...gormgen.Condition) IActHiIdentitylinkDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a actHiIdentitylinkDo) Select(conds ...field.Expr) IActHiIdentitylinkDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a actHiIdentitylinkDo) Where(conds ...gormgen.Condition) IActHiIdentitylinkDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a actHiIdentitylinkDo) Order(conds ...field.Expr) IActHiIdentitylinkDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a actHiIdentitylinkDo) Distinct(cols ...field.Expr) IActHiIdentitylinkDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a actHiIdentitylinkDo) Omit(cols ...field.Expr) IActHiIdentitylinkDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a actHiIdentitylinkDo) Join(table schema.Tabler, on ...field.Expr) IActHiIdentitylinkDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a actHiIdentitylinkDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActHiIdentitylinkDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a actHiIdentitylinkDo) RightJoin(table schema.Tabler, on ...field.Expr) IActHiIdentitylinkDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a actHiIdentitylinkDo) Group(cols ...field.Expr) IActHiIdentitylinkDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a actHiIdentitylinkDo) Having(conds ...gormgen.Condition) IActHiIdentitylinkDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a actHiIdentitylinkDo) Limit(limit int) IActHiIdentitylinkDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a actHiIdentitylinkDo) Offset(offset int) IActHiIdentitylinkDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a actHiIdentitylinkDo) Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) IActHiIdentitylinkDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a actHiIdentitylinkDo) Unscoped() IActHiIdentitylinkDo {
	return a.withDO(a.DO.Unscoped())
}

func (a actHiIdentitylinkDo) Create(values ...*model.ActHiIdentitylink) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a actHiIdentitylinkDo) CreateInBatches(values []*model.ActHiIdentitylink, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a actHiIdentitylinkDo) Save(values ...*model.ActHiIdentitylink) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a actHiIdentitylinkDo) First() (*model.ActHiIdentitylink, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActHiIdentitylink), nil
	}
}

func (a actHiIdentitylinkDo) Take() (*model.ActHiIdentitylink, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActHiIdentitylink), nil
	}
}

func (a actHiIdentitylinkDo) Last() (*model.ActHiIdentitylink, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActHiIdentitylink), nil
	}
}

func (a actHiIdentitylinkDo) Find() ([]*model.ActHiIdentitylink, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActHiIdentitylink), err
}

func (a actHiIdentitylinkDo) FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.ActHiIdentitylink, err error) {
	buf := make([]*model.ActHiIdentitylink, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gormgen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a actHiIdentitylinkDo) FindInBatches(result *[]*model.ActHiIdentitylink, batchSize int, fc func(tx gormgen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a actHiIdentitylinkDo) Attrs(attrs ...field.AssignExpr) IActHiIdentitylinkDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a actHiIdentitylinkDo) Assign(attrs ...field.AssignExpr) IActHiIdentitylinkDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a actHiIdentitylinkDo) Joins(fields ...field.RelationField) IActHiIdentitylinkDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a actHiIdentitylinkDo) Preload(fields ...field.RelationField) IActHiIdentitylinkDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a actHiIdentitylinkDo) FirstOrInit() (*model.ActHiIdentitylink, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActHiIdentitylink), nil
	}
}

func (a actHiIdentitylinkDo) FirstOrCreate() (*model.ActHiIdentitylink, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActHiIdentitylink), nil
	}
}

func (a actHiIdentitylinkDo) FindByPage(offset int, limit int) (result []*model.ActHiIdentitylink, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a actHiIdentitylinkDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a actHiIdentitylinkDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a actHiIdentitylinkDo) Fetch(result interface{}) (err error) {
	return a.DO.Fetch(result)
}

func (a actHiIdentitylinkDo) Delete(models ...*model.ActHiIdentitylink) (result gormgen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *actHiIdentitylinkDo) withDO(do gormgen.Dao) *actHiIdentitylinkDo {
	a.DO = *do.(*gormgen.DO)
	return a
}

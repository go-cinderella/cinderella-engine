// Code generated by github.com/wubin1989/gen. DO NOT EDIT.
// Code generated by github.com/wubin1989/gen. DO NOT EDIT.
// Code generated by github.com/wubin1989/gen. DO NOT EDIT.

package query

import (
	"context"

	gormgen "github.com/wubin1989/gen"
	"github.com/wubin1989/gorm"
	"github.com/wubin1989/gorm/clause"
	"github.com/wubin1989/gorm/schema"

	"github.com/wubin1989/gen/field"

	"github.com/wubin1989/dbresolver"

	"github.com/go-cinderella/cinderella-engine/engine/model"
)

func newActReDeployment(db *gorm.DB, opts ...gormgen.DOOption) actReDeployment {
	_actReDeployment := actReDeployment{}

	_actReDeployment.actReDeploymentDo.UseDB(db, opts...)
	_actReDeployment.actReDeploymentDo.UseModel(&model.ActReDeployment{})

	tableName := _actReDeployment.actReDeploymentDo.TableName()
	_actReDeployment.ALL = field.NewAsterisk(tableName)
	_actReDeployment.ID = field.NewString(tableName, "id_")
	_actReDeployment.Name = field.NewString(tableName, "name_")
	_actReDeployment.Category = field.NewString(tableName, "category_")
	_actReDeployment.Key = field.NewString(tableName, "key_")
	_actReDeployment.TenantID = field.NewString(tableName, "tenant_id_")
	_actReDeployment.DeployTime = field.NewTime(tableName, "deploy_time_")
	_actReDeployment.DerivedFrom = field.NewString(tableName, "derived_from_")
	_actReDeployment.DerivedFromRoot = field.NewString(tableName, "derived_from_root_")
	_actReDeployment.ParentDeploymentID = field.NewString(tableName, "parent_deployment_id_")
	_actReDeployment.EngineVersion = field.NewString(tableName, "engine_version_")
	_actReDeployment.ProcessID = field.NewString(tableName, "process_id_")

	_actReDeployment.fillFieldMap()

	return _actReDeployment
}

type actReDeployment struct {
	actReDeploymentDo

	ALL                field.Asterisk
	ID                 field.String
	Name               field.String
	Category           field.String
	Key                field.String
	TenantID           field.String
	DeployTime         field.Time
	DerivedFrom        field.String
	DerivedFromRoot    field.String
	ParentDeploymentID field.String
	EngineVersion      field.String
	ProcessID          field.String

	fieldMap map[string]field.Expr
}

func (a actReDeployment) Table(newTableName string) *actReDeployment {
	a.actReDeploymentDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a actReDeployment) As(alias string) *actReDeployment {
	a.actReDeploymentDo.DO = *(a.actReDeploymentDo.As(alias).(*gormgen.DO))
	return a.updateTableName(alias)
}

func (a *actReDeployment) updateTableName(table string) *actReDeployment {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "id_")
	a.Name = field.NewString(table, "name_")
	a.Category = field.NewString(table, "category_")
	a.Key = field.NewString(table, "key_")
	a.TenantID = field.NewString(table, "tenant_id_")
	a.DeployTime = field.NewTime(table, "deploy_time_")
	a.DerivedFrom = field.NewString(table, "derived_from_")
	a.DerivedFromRoot = field.NewString(table, "derived_from_root_")
	a.ParentDeploymentID = field.NewString(table, "parent_deployment_id_")
	a.EngineVersion = field.NewString(table, "engine_version_")
	a.ProcessID = field.NewString(table, "process_id_")

	a.fillFieldMap()

	return a
}

func (a *actReDeployment) WithContext(ctx context.Context) IActReDeploymentDo {
	return a.actReDeploymentDo.WithContext(ctx)
}

func (a actReDeployment) TableName() string { return a.actReDeploymentDo.TableName() }

func (a actReDeployment) Alias() string { return a.actReDeploymentDo.Alias() }

func (a actReDeployment) Columns(cols ...field.Expr) gormgen.Columns {
	return a.actReDeploymentDo.Columns(cols...)
}

func (a *actReDeployment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *actReDeployment) GetFieldExprByName(fieldName string) (field.Expr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	return _f, ok
}

func (a *actReDeployment) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 10)
	a.fieldMap["id_"] = a.ID
	a.fieldMap["name_"] = a.Name
	a.fieldMap["category_"] = a.Category
	a.fieldMap["key_"] = a.Key
	a.fieldMap["tenant_id_"] = a.TenantID
	a.fieldMap["deploy_time_"] = a.DeployTime
	a.fieldMap["derived_from_"] = a.DerivedFrom
	a.fieldMap["derived_from_root_"] = a.DerivedFromRoot
	a.fieldMap["parent_deployment_id_"] = a.ParentDeploymentID
	a.fieldMap["engine_version_"] = a.EngineVersion
	a.fieldMap["process_id_"] = a.ProcessID
}

func (a actReDeployment) Clone(db *gorm.DB) actReDeployment {
	a.actReDeploymentDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a actReDeployment) ReplaceDB(db *gorm.DB) actReDeployment {
	a.actReDeploymentDo.ReplaceDB(db)
	return a
}

type actReDeploymentDo struct{ gormgen.DO }

type IActReDeploymentDo interface {
	gormgen.SubQuery
	Debug() IActReDeploymentDo
	WithContext(ctx context.Context) IActReDeploymentDo
	WithResult(fc func(tx gormgen.Dao)) gormgen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActReDeploymentDo
	WriteDB() IActReDeploymentDo
	As(alias string) gormgen.Dao
	Session(config *gorm.Session) IActReDeploymentDo
	Columns(cols ...field.Expr) gormgen.Columns
	Clauses(conds ...clause.Expression) IActReDeploymentDo
	Not(conds ...gormgen.Condition) IActReDeploymentDo
	Or(conds ...gormgen.Condition) IActReDeploymentDo
	Select(conds ...field.Expr) IActReDeploymentDo
	Where(conds ...gormgen.Condition) IActReDeploymentDo
	Order(conds ...field.Expr) IActReDeploymentDo
	Distinct(cols ...field.Expr) IActReDeploymentDo
	Omit(cols ...field.Expr) IActReDeploymentDo
	Join(table schema.Tabler, on ...field.Expr) IActReDeploymentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActReDeploymentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActReDeploymentDo
	Group(cols ...field.Expr) IActReDeploymentDo
	Having(conds ...gormgen.Condition) IActReDeploymentDo
	Limit(limit int) IActReDeploymentDo
	Offset(offset int) IActReDeploymentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) IActReDeploymentDo
	Unscoped() IActReDeploymentDo
	Create(values ...*model.ActReDeployment) error
	CreateInBatches(values []*model.ActReDeployment, batchSize int) error
	Save(values ...*model.ActReDeployment) error
	First() (*model.ActReDeployment, error)
	Take() (*model.ActReDeployment, error)
	Last() (*model.ActReDeployment, error)
	Find() ([]*model.ActReDeployment, error)
	FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.ActReDeployment, err error)
	FindInBatches(result *[]*model.ActReDeployment, batchSize int, fc func(tx gormgen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ActReDeployment) (info gormgen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	Updates(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateFrom(q gormgen.SubQuery) gormgen.Dao
	Attrs(attrs ...field.AssignExpr) IActReDeploymentDo
	Assign(attrs ...field.AssignExpr) IActReDeploymentDo
	Joins(fields ...field.RelationField) IActReDeploymentDo
	Preload(fields ...field.RelationField) IActReDeploymentDo
	FirstOrInit() (*model.ActReDeployment, error)
	FirstOrCreate() (*model.ActReDeployment, error)
	FindByPage(offset int, limit int) (result []*model.ActReDeployment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Fetch(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActReDeploymentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a actReDeploymentDo) Debug() IActReDeploymentDo {
	return a.withDO(a.DO.Debug())
}

func (a actReDeploymentDo) WithContext(ctx context.Context) IActReDeploymentDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a actReDeploymentDo) ReadDB() IActReDeploymentDo {
	return a.Clauses(dbresolver.Read)
}

func (a actReDeploymentDo) WriteDB() IActReDeploymentDo {
	return a.Clauses(dbresolver.Write)
}

func (a actReDeploymentDo) Session(config *gorm.Session) IActReDeploymentDo {
	return a.withDO(a.DO.Session(config))
}

func (a actReDeploymentDo) Clauses(conds ...clause.Expression) IActReDeploymentDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a actReDeploymentDo) Returning(value interface{}, columns ...string) IActReDeploymentDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a actReDeploymentDo) Not(conds ...gormgen.Condition) IActReDeploymentDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a actReDeploymentDo) Or(conds ...gormgen.Condition) IActReDeploymentDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a actReDeploymentDo) Select(conds ...field.Expr) IActReDeploymentDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a actReDeploymentDo) Where(conds ...gormgen.Condition) IActReDeploymentDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a actReDeploymentDo) Order(conds ...field.Expr) IActReDeploymentDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a actReDeploymentDo) Distinct(cols ...field.Expr) IActReDeploymentDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a actReDeploymentDo) Omit(cols ...field.Expr) IActReDeploymentDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a actReDeploymentDo) Join(table schema.Tabler, on ...field.Expr) IActReDeploymentDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a actReDeploymentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActReDeploymentDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a actReDeploymentDo) RightJoin(table schema.Tabler, on ...field.Expr) IActReDeploymentDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a actReDeploymentDo) Group(cols ...field.Expr) IActReDeploymentDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a actReDeploymentDo) Having(conds ...gormgen.Condition) IActReDeploymentDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a actReDeploymentDo) Limit(limit int) IActReDeploymentDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a actReDeploymentDo) Offset(offset int) IActReDeploymentDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a actReDeploymentDo) Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) IActReDeploymentDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a actReDeploymentDo) Unscoped() IActReDeploymentDo {
	return a.withDO(a.DO.Unscoped())
}

func (a actReDeploymentDo) Create(values ...*model.ActReDeployment) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a actReDeploymentDo) CreateInBatches(values []*model.ActReDeployment, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a actReDeploymentDo) Save(values ...*model.ActReDeployment) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a actReDeploymentDo) First() (*model.ActReDeployment, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActReDeployment), nil
	}
}

func (a actReDeploymentDo) Take() (*model.ActReDeployment, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActReDeployment), nil
	}
}

func (a actReDeploymentDo) Last() (*model.ActReDeployment, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActReDeployment), nil
	}
}

func (a actReDeploymentDo) Find() ([]*model.ActReDeployment, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActReDeployment), err
}

func (a actReDeploymentDo) FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.ActReDeployment, err error) {
	buf := make([]*model.ActReDeployment, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gormgen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a actReDeploymentDo) FindInBatches(result *[]*model.ActReDeployment, batchSize int, fc func(tx gormgen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a actReDeploymentDo) Attrs(attrs ...field.AssignExpr) IActReDeploymentDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a actReDeploymentDo) Assign(attrs ...field.AssignExpr) IActReDeploymentDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a actReDeploymentDo) Joins(fields ...field.RelationField) IActReDeploymentDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a actReDeploymentDo) Preload(fields ...field.RelationField) IActReDeploymentDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a actReDeploymentDo) FirstOrInit() (*model.ActReDeployment, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActReDeployment), nil
	}
}

func (a actReDeploymentDo) FirstOrCreate() (*model.ActReDeployment, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActReDeployment), nil
	}
}

func (a actReDeploymentDo) FindByPage(offset int, limit int) (result []*model.ActReDeployment, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a actReDeploymentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a actReDeploymentDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a actReDeploymentDo) Fetch(result interface{}) (err error) {
	return a.DO.Fetch(result)
}

func (a actReDeploymentDo) Delete(models ...*model.ActReDeployment) (result gormgen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *actReDeploymentDo) withDO(do gormgen.Dao) *actReDeploymentDo {
	a.DO = *do.(*gormgen.DO)
	return a
}
